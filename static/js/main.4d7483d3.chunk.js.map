{"version":3,"sources":["components/PathfindingVisualizer/Node/Node.js","components/dijkstra/djikstra.js","components/PathfindingVisualizer/PathfindingVisualizer.js","components/QuickSort/QuickSort.js","components/BubbleSort/BubbleSort.js","components/BFS/BFS.jsx","components/BFS/BFS2.js","components/A*Star/A_star.js","components/Traveling_Salesperson/TravelingSalesperson.js","img/algob-w-2.png","components/HomePage/HomePage.js","components/Navbar/Router.js","algoseeker.png","components/Navbar/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","state","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","window","location","reload","Button","style","marginRight","onClick","clearPath","color","visualizeDijkstra","resetSketch","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","QuickSort","p","values","states","slow","slower","normal","half_speed","quarter_speed","normal_speed","quickSort","arr","start","end","a","partition","index","Promise","all","pivotValue","pivotIndex","swap","b","sleep","temp","ms","resolve","setup","createCanvas","Array","floor","width","random","height","button","createButton","mousePressed","parent","slowerBtn","slowBtn","normalBtn","draw","background","noStroke","fill","rect","sketch","BubbleSort","j","console","log","noLoop","stroke","line","href","DUMMY_OBSTACLES","BreadthFirstSearch","handleMouseMove","bind","handleClick","handleExpandClick","hexSize","hexOrigin","x","y","currentHex","q","r","s","playerPosition","obstacles","frontier","cameFrom","hexParametres","getHexParametres","canvasSize","canvasWidth","canvasHeight","canvasHex","canvasInteraction","canvasView","getCanvasPosition","drawHex","Point","drawHexes","nextProps","nextState","getContext","clearRect","currentDistanceLine","l","JSON","parse","hexToPixel","Hex","ctx","hexWidth","hexHeight","vertDist","horizDist","qLeftSide","Math","round","qRightSide","rTopSide","rBottomSide","n","canvasID","center","lineWidth","lineColor","fillColor","getHexCornerCoord","fillHex","drawLine","angle_deg","angle_rad","PI","cos","sin","beginPath","moveTo","strokeStyle","lineTo","closePath","c0","c1","c2","c3","c4","c5","fillStyle","globalAlpha","h","fillText","sqrt","size","origin","hexA","hexB","dist","cubeDistance","cubeRound","cubeLinearInt","concat","direction","t","linearInt","cubeAdd","cubeDirection","getCubeNeighbor","cube","rx","ry","rz","x_diff","abs","y_diff","z_diff","cubeSubstract","getBoundingClientRect","canvasPosition","left","right","top","bottom","e","offsetX","pageX","offsetY","pageY","pageYOffset","pixelToHex","getDistanceLine","addObstacles","includes","stringify","current","getNeighbors","hasOwnProperty","Object","assign","textAlign","ref","canvasCoordinates","onMouseMove","BFSExtra","hexPathMap","path","drawObstacles","drawPath","from","fromCoord","drawArrow","bottomH","topH","breadthFirstSearchCallback","breadthFirstSearch","getPath","undefined","fromx","fromy","tox","toy","angle","atan2","React","AStar","heuristic","w","cols","rows","openSet","closedSet","Spot","f","g","previous","wall","show","ellipse","addNeighbors","winner","elt","splice","removeFromArray","tempG","newPath","noFill","strokeWeight","beginShape","vertex","endShape","TravelingSalesperson","bestEver","currentBest","cities","population","fitness","recordDistance","calcDistance","points","order","sum","cityA","cityB","pickOne","list","prob","crossOver","orderA","orderB","neworder","city","mutate","mutationRate","indexA","v","createVector","shuffle","createP","currentRecord","d","pow","calculateFitness","normalizeFitness","newPopulation","nextGeneration","translate","HomePage","options","value","fpsLimit","interactivity","detectsOn","events","enable","mode","onHover","resize","modes","bubble","duration","opacity","quantity","repulse","particles","links","collisions","move","outMode","speed","straight","number","density","value_area","shape","type","detectRetina","src","img","Router","Navbar","to","padding","textDecoration","fontWeight","fontSize","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4d7483d3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Node.css\";\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row\n    } = this.props;\n    const extraClassName = isFinish\n      ? \"node-finish\"\n      : isStart\n      ? \"node-start\"\n      : isWall\n      ? \"node-wall\"\n      : \"\";\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}\n      ></div>\n    );\n  }\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\n\nexport function dijkstra(grid, startNode, finishNode) {\n    const visitedNodesInOrder = [];\n    startNode.distance = 0;\n    const unvisitedNodes = getAllNodes(grid);\n    while (!!unvisitedNodes.length) {\n      sortNodesByDistance(unvisitedNodes);\n      const closestNode = unvisitedNodes.shift();\n\n      // If we encounter a wall, we skip it.\n      if (closestNode.isWall) continue;\n      \n      // If the closest node is at a distance of infinity,\n      // we must be trapped and should therefore stop.\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\n      closestNode.isVisited = true;\n      visitedNodesInOrder.push(closestNode);\n      if (closestNode === finishNode) return visitedNodesInOrder;\n      updateUnvisitedNeighbors(closestNode, grid);\n    }\n  }\n  \n  function sortNodesByDistance(unvisitedNodes) {\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n  }\n  \n  function updateUnvisitedNeighbors(node, grid) {\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n    for (const neighbor of unvisitedNeighbors) {\n      neighbor.distance = node.distance + 1;\n      neighbor.previousNode = node;\n    }\n  }\n  \n  function getUnvisitedNeighbors(node, grid) {\n    const neighbors = [];\n    const { col, row } = node;\n    if (row > 0) neighbors.push(grid[row - 1][col]);\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n    if (col > 0) neighbors.push(grid[row][col - 1]);\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n    return neighbors.filter(neighbor => !neighbor.isVisited);\n  }\n  \n  function getAllNodes(grid) {\n    const nodes = [];\n    for (const row of grid) {\n      for (const node of row) {\n        nodes.push(node);\n      }\n    }\n    return nodes;\n  }\n  \n  // Backtracks from the finishNode to find the shortest path.\n  // Only works when called *after* the dijkstra method above.\n  export function getNodesInShortestPathOrder(finishNode) {\n    const nodesInShortestPathOrder = [];\n    let currentNode = finishNode;\n    while (currentNode !== null) {\n      nodesInShortestPathOrder.unshift(currentNode);\n      currentNode = currentNode.previousNode;\n    }\n    return nodesInShortestPathOrder;\n  }","import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../dijkstra/djikstra\";\nimport {\n  Button,\n} from \"semantic-ui-react\";\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 10;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 40;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  clearPath() {\n    this.setState({ grid: [] });\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  resetSketch() {\n    window.location.reload();\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <section id=\"dijkstraSec\">\n\n      <div id=\"dijkstraTitle\">\n      Dijkstra's Algorithm\n      </div>\n      <b/>\n\n      <div className=\"dijkstraDescription\">\n         \n          <b id='bold'>What is it?:</b> <br />\n          Dijkstra's Algorithm is an algorithm for finding the shortest paths between nodes in a graph.<br />\n          It generates a shortest path tree with given source which guarantees the shortest path.<br />\n          <br/>\n          \n          <b id=\"bold\">How to use: </b> <br />\n              Create walls by clicking and dragging over the grid. <br />\n              Hit visualize to see Dijkstra's Algorithm select the shortest path!  <br />\n              <br/>\n          \n          <b id=\"bold\"> How it works: </b> <br />The <b>start</b> node and <b>end</b> node are marked on left and right respectively. <br />\n              Find distance to all nodes from start, all distances=infinity except start node to begin <br />\n         \n          <b id=\"bold\">1.</b> Pick the closest node to visit, which is start node. <br />\n            <b id=\"bold\">2.</b> Update neighboring nodes, set their distance to current distance + 1.<br></br>\n            <b id=\"bold\">3.</b> Mark start node visited. Select next closest node.\n            <br />\n            <b id=\"bold\">4.</b> Pick one of the 4 neighbors and repeat.<br></br><br></br>\n          \n          <b id=\"bold\">Note: </b>The most efficient way to keep track of the closest unvisited node is by using a Min Heap.<br></br>\n            Since the amount of nodes is so few here, we opt for using an array of unvisited nodes and<br></br>\n            sort the nodes with each pass. The nodes are animated in the order that they are visited.\n\n      </div>\n\n      <Button\n        style={{ marginRight: 16 }}\n        onClick={() => this.clearPath()}\n      >\n        Clear Path\n      </Button>\n\n      <Button\n        color=\"blue\"\n        style={{ marginRight: 16 }}\n        onClick={() => this.visualizeDijkstra()}>\n        Visualize Algorithm\n      </Button>\n\n      <Button onClick={() => this.resetSketch()}>\n        Reset Board\n      </Button>\n\n      <div className=\"dijkstraGrid\">\n        {grid.map((row, rowIdx) => {\n          return (\n            <div key={rowIdx}>\n              {row.map((node, nodeIdx) => {\n                const { row, col, isFinish, isStart, isWall } = node;\n                return (\n                  <Node\n                    key={nodeIdx}\n                    col={col}\n                    isFinish={isFinish}\n                    isStart={isStart}\n                    isWall={isWall}\n                    mouseIsPressed={mouseIsPressed}\n                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                    onMouseEnter={(row, col) =>\n                      this.handleMouseEnter(row, col)\n                    }\n                    onMouseUp={() => this.handleMouseUp()}\n                    row={row}\n                  ></Node>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    </section>\n  );\n}\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","import React, {Component} from 'react';\nimport P5Wrapper from 'react-p5-wrapper'\n\nexport default class QuickSort extends Component {\n\n  sketch(p){\n    let values = [];\n    let w = 30;\n    let states = [];\n    let slow = false;\n    let slower = false;\n    let normal = true;\n\n      p.setup = () => {\n\n        p.createCanvas(900, 600);\n\n    values = new Array(p.floor(p.width / w));\n    for (let i = 0; i < values.length; i++) {\n      values[i] = p.random(p.height);\n      states[i] = -1;\n    }\n    quickSort(values, 0, values.length - 1);\n    let button = p.createButton(\"reset\");\n    button.mousePressed(resetSketch);\n    button.parent(\"resetQSort\");\n    let slowerBtn = p.createButton(\"slower\");\n    slowerBtn.mousePressed(quarter_speed);\n    slowerBtn.parent(\"resetQSort\");\n    let slowBtn = p.createButton(\"slow\");\n    slowBtn.mousePressed(half_speed);\n    slowBtn.parent(\"resetQSort\");\n    let normalBtn = p.createButton(\"normal\");\n    normalBtn.mousePressed(normal_speed);\n    normalBtn.parent(\"resetQSort\");\n\n      }\n\n      function resetSketch() {\n        window.location.reload('/qsort');\n      }\n\n      function half_speed() {\n        slow = true;\n        normal = false;\n        slower = false;\n      }\n      function quarter_speed() {\n        slower = true;\n        normal = false;\n        slow = false;\n      }\n      function normal_speed() {\n        slow = false;\n        normal = true;\n        slower = false;\n      }\n\n\n      async function quickSort(arr, start, end) {\n        if (start >= end) {\n          return;\n        }\n        let index = await partition(arr, start, end);\n        states[index] = -1;\n\n        await Promise.all([\n          quickSort(arr, start, index - 1),\n          quickSort(arr, index + 1, end)\n        ]);\n      }\n\n      async function partition(arr, start, end) {\n    for (let i = start; i < end; i++) {\n      states[i] = 1;\n    }\n\n    let pivotValue = arr[end];\n    let pivotIndex = start;\n    states[pivotIndex] = 0;\n    for (let i = start; i < end; i++) {\n      if (arr[i] < pivotValue) {\n        await swap(arr, i, pivotIndex);\n        states[pivotIndex] = -1;\n        pivotIndex++;\n        states[pivotIndex] = 0;\n      }\n    }\n    await swap(arr, pivotIndex, end);\n\n    for (let i = start; i < end; i++) {\n      if (i != pivotIndex) {\n        states[i] = -1;\n      }\n    }\n\n    return pivotIndex;\n  }\n\n      p.draw = () => {\n        p.background(0);\n\n    for (let i = 0; i < values.length; i++) {\n      p.noStroke();\n      if (states[i] == 0) {\n        p.fill('#E0777D');\n      } else if (states[i] == 1) {\n        p.fill('#D6FFB7');\n      } else if (states[i] == 2) {\n        p.fill('#0000FF');\n      }else {\n        p.fill(255);\n      }\n      p.rect(i * w, p.height - values[i], w, values[i]);\n    }\n      }\n\n      async function swap(arr, a, b) {\n        if(slow) {\n          await sleep(1000);\n        }else if(slower) {\n          await sleep(3000);\n        }else if(normal) {\n          await sleep(300);\n        }\n\n        let temp = arr[a];\n        arr[a] = arr[b];\n        arr[b] = temp;\n      }\n\n      function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  }\n\n\nrender() {\n    return (\n\n      <section id=\"QSort\">\n        <div className=\"title3\">\n        Quick Sort\n        </div>\n        <div className=\"description3\">\n          <b>What is it?</b><br/>\n          The Quicksort algorithm is an efficient sorting algorithm that is still commonly used,<br/>\n          it can be two to three times faster than merge sort and heapsort algorithms.<br />\n          <br/>\n          <b>Current position</b> in the array is indicated by the red bar.<br/>\n          <b>Pivot value</b> is indicated by the element immediately to the right of the green shade.<br/>\n          <br/>\n          <b>How it works:</b><br/>\n          It's a divide-and-conquer algorithm that works by scanning through the array from left to right.<br/>\n          All values greater than the pivot are swapped with currentPosition(red bar).<br/>\n          All values less than pivot are skipped over.<br/>\n          Pivot value is swapped with currentPosition when all green shade values are less than pivot.<br></br>\n          Subsequently, a new pivot is chosen, indicated by a new red bar appearing.<br/>\n          <br/>\n          <b>Real World Application:</b><br/>\n          It's the basis for many programming lanaguage libraries such as:<br/>\n          - Python<br/>\n          - Java<br/>\n          - C, C++<br/>\n\n        </div>\n        <div id=\"resetQSort\"></div>\n        <br/>\n        <P5Wrapper sketch={this.sketch} />\n      </section>\n    );\n\n  }\n\n}","import React, {Component} from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\n\nexport default class BubbleSort extends Component {\n    sketch(p){\n        let values = [];\n        let i = 0;\n        let j = 0;\n        let w = 50;\n\n        p.setup = () => {\n            p.createCanvas(900, 600);\n            values = new Array(p.width);\n            for (let i = 0; i < values.length; i++) {\n                values[i] = p.random(p.height);\n            }\n        }\n\n        p.draw = () => {\n            p.background(0);\n\n            if (i < values.length) {\n                for (let j = 0; j < values.length - i - 1; j++) {\n                    let a = values[j];\n                    let b = values[j + 1];\n                    if (a > b) {\n                        swap(values, j, j + 1);\n                    }\n                }\n            } else {\n            console.log(\"finished\");\n            p.noLoop();\n            }\n            i++;\n            for (let i = 0; i < values.length; i++) {\n                p.stroke(255);\n                p.line(i, p.height, i, p.height - values[i]);\n            }\n        }\n\n        function swap(arr, a, b) {\n            let temp = arr[a];\n            arr[a] = arr[b];\n            arr[b] = temp;\n        }\n    }\n\n    render() {\n\n        return (\n            <section id=\"BSort\">\n                <div className=\"title4\">\n                Bubble Sort\n                </div>\n\n                <div className=\"dijkstraDescription\">\n                <b id='bold'>What is it?:</b> <br/>\n                    Bubble Sort is the simplest sorting algorithm that works by repeatedly swapping the adjacent \n                    elements until they appear in the correct order.<br/>\n                    It's commonly referred to as the sinking sort, as you can tell by the visualization below.<br/>\n                    <br/>\n                <b id=\"bold\"> How it works: </b> \n                    <br />\n                    The <b>largest end node</b> gets sorted first. <br/>\n                    The smaller elements take longer to move to their correct positions.<br/>\n                    <br/>\n                <b id='bold'>Real World Application:</b><br/>\n                    - Due to it's simple nature, the bubble sort algorithm is often used to introduce the<br/> \n                    concept of algorithms to computer science students. <br/>\n                    - It interacts poorly with modern CPU hardware. It produces atleast twice as many writes,<br/> \n                    cache misses and more branch mispredicitons than an insertion sort would.<br/>\n                    <br/>\n                <b id=\"bold\">Note: </b>\n                    Although bubble sort is one of the simplest sorting algorithms to understand and implement,<br></br>\n                    it's O(n2) complexity means that it's efficiency decreases the larger the list to sort through is.  <br></br>\n                </div>\n\n                <button onClick={() => {window.location.href='/bsort'}}>Reset</button>\n                <br/>\n                <br/>\n                <P5Wrapper sketch={this.sketch}></P5Wrapper>\n            </section>\n        );\n    }\n}","import React, {Component} from 'react';\n\nvar DUMMY_OBSTACLES = \n    ['{\"q\":6,\"r\":9,\"s\":-15}', '{\"q\":7,\"r\":8,\"s\":-15}', \n    '{\"q\":7,\"r\":7,\"s\":-14}', '{\"q\":8,\"r\":6,\"s\":-14}', \n    '{\"q\":8,\"r\":5,\"s\":-13}', '{\"q\":9,\"r\":4,\"s\":-13}', \n    '{\"q\":5,\"r\":9,\"s\":-14}', '{\"q\":4,\"r\":9,\"s\":-13}', \n    '{\"q\":3,\"r\":9,\"s\":-12}', \n    '{\"q\":2,\"r\":9,\"s\":-11}', '{\"q\":1,\"r\":9,\"s\":-10}', \n    '{\"q\":0,\"r\":9,\"s\":-9}', '{\"q\":-1,\"r\":9,\"s\":-8}', \n    '{\"q\":-2,\"r\":9,\"s\":-7}', '{\"q\":-3,\"r\":9,\"s\":-6}',\n    '{\"q\":-4,\"r\":9,\"s\":-5}', '{\"q\":-5,\"r\":9,\"s\":-4}', \n    '{\"q\":-6,\"r\":9,\"s\":-3}', '{\"q\":-7,\"r\":9,\"s\":-2}', \n    '{\"q\":-8,\"r\":9,\"s\":-1}', '{\"q\":-9,\"r\":9,\"s\":0}', \n    '{\"q\":-11,\"r\":9,\"s\":2}', '{\"q\":-10,\"r\":9,\"s\":1}',\n    '{\"q\":-12,\"r\":9,\"s\":3}', '{\"q\":-13,\"r\":9,\"s\":4}', \n    '{\"q\":-14,\"r\":9,\"s\":5}', '{\"q\":-15,\"r\":9,\"s\":6}', \n    '{\"q\":-15,\"r\":8,\"s\":7}', '{\"q\":-14,\"r\":7,\"s\":7}', \n    '{\"q\":-14,\"r\":6,\"s\":8}', '{\"q\":-13,\"r\":5,\"s\":8}',\n    '{\"q\":-13,\"r\":4,\"s\":9}', '{\"q\":-12,\"r\":3,\"s\":9}', \n    '{\"q\":-12,\"r\":2,\"s\":10}', '{\"q\":-11,\"r\":1,\"s\":10}', \n    '{\"q\":-11,\"r\":0,\"s\":11}', '{\"q\":-10,\"r\":-1,\"s\":11}', \n    '{\"q\":-10,\"r\":-2,\"s\":12}',\n    '{\"q\":-9,\"r\":-3,\"s\":12}', '{\"q\":-9,\"r\":-4,\"s\":13}', \n    '{\"q\":-8,\"r\":-5,\"s\":13}', '{\"q\":-8,\"r\":-6,\"s\":14}', \n    '{\"q\":-7,\"r\":-7,\"s\":14}', '{\"q\":-7,\"r\":-8,\"s\":15}', \n    '{\"q\":-6,\"r\":-9,\"s\":15}',\n    '{\"q\":-5,\"r\":-9,\"s\":14}', '{\"q\":-4,\"r\":-9,\"s\":13}', \n    '{\"q\":-3,\"r\":-9,\"s\":12}', '{\"q\":-2,\"r\":-9,\"s\":11}', \n    '{\"q\":-1,\"r\":-9,\"s\":10}', '{\"q\":0,\"r\":-9,\"s\":9}', \n    '{\"q\":1,\"r\":-9,\"s\":8}', '{\"q\":2,\"r\":-9,\"s\":7}',\n    '{\"q\":3,\"r\":-9,\"s\":6}', '{\"q\":4,\"r\":-9,\"s\":5}', \n    '{\"q\":5,\"r\":-9,\"s\":4}', '{\"q\":6,\"r\":-9,\"s\":3}', \n    '{\"q\":7,\"r\":-9,\"s\":2}', '{\"q\":8,\"r\":-9,\"s\":1}', \n    '{\"q\":9,\"r\":-9,\"s\":0}', '{\"q\":10,\"r\":-9,\"s\":-1}',\n    '{\"q\":11,\"r\":-9,\"s\":-2}', '{\"q\":12,\"r\":-9,\"s\":-3}', \n    '{\"q\":13,\"r\":-9,\"s\":-4}', '{\"q\":14,\"r\":-9,\"s\":-5}', \n    '{\"q\":15,\"r\":-9,\"s\":-6}', '{\"q\":15,\"r\":-8,\"s\":-7}', \n    '{\"q\":14,\"r\":-7,\"s\":-7}',\n    '{\"q\":14,\"r\":-6,\"s\":-8}', '{\"q\":13,\"r\":-5,\"s\":-8}', \n    '{\"q\":13,\"r\":-4,\"s\":-9}', '{\"q\":12,\"r\":-3,\"s\":-9}', \n    '{\"q\":12,\"r\":-2,\"s\":-10}', '{\"q\":11,\"r\":-1,\"s\":-10}', \n    '{\"q\":11,\"r\":0,\"s\":-11}',\n    '{\"q\":10,\"r\":1,\"s\":-11}', '{\"q\":10,\"r\":2,\"s\":-12}', \n    '{\"q\":9,\"r\":3,\"s\":-12}', '{\"q\":-2, \"r\":-8, \"s\":10}', \n    '{\"q\": -3, \"r\": -7, \"s\": 10}', '{\"q\": -4, \"r\": -6, \"s\": 10}', \n    '{\"q\": -5, \"r\": -5, \"s\": 10}',\n    '{\"q\": -6, \"r\": -4, \"s\": 10}', '{\"q\": -7, \"r\": -4, \"s\": 11}', \n    '{\"q\": 4, \"r\": -7, \"s\": 3}', '{\"q\": 3, \"r\": -6, \"s\": 3}', \n    '{\"q\": 2, \"r\": -5, \"s\": 3}',\n    '{\"q\": 1, \"r\": -4, \"s\": 3}',\n    '{\"q\": 2, \"r\": -4, \"s\": 2}',\n    '{\"q\": 3, \"r\": -4, \"s\": 1}',\n    '{\"q\": 4, \"r\": -4, \"s\": 0}',\n    '{\"q\": 9, \"r\": -3, \"s\": -6}',\n    '{\"q\": 10, \"r\": -3, \"s\": -7}',\n    '{\"q\": 8, \"r\": -2, \"s\": -6}',\n    '{\"q\": 7, \"r\": -2, \"s\": -5}',\n    '{\"q\": 4, \"r\": -2, \"s\": -2}',\n    '{\"q\": 4, \"r\": -1, \"s\": -3}',\n    '{\"q\": 4, \"r\": 0, \"s\": -4}',\n    '{\"q\": 4, \"r\": 1, \"s\": -5}',\n    '{\"q\": 3, \"r\": 2, \"s\": -5}',\n    '{\"q\": 2, \"r\": 3, \"s\": -5}',\n    '{\"q\": 1, \"r\": 4, \"s\": -5}',\n    '{\"q\": -0, \"r\": 5, \"s\": -5}',\n    '{\"q\": -1, \"r\": 6, \"s\": -5}',\n    '{\"q\": -2, \"r\": 7, \"s\": -5}',\n    '{\"q\": 4, \"r\": 5, \"s\": -9}',\n    '{\"q\": 4, \"r\": 6, \"s\": -10}',\n    '{\"q\": 5, \"r\": 6, \"s\": -11}',\n    '{\"q\": 5, \"r\": 7, \"s\": -12}',\n    '{\"q\": -5, \"r\": 7, \"s\": -2}',\n    '{\"q\": -5, \"r\": 8, \"s\": -3}',\n    '{\"q\": -5, \"r\": 6, \"s\": -1}',\n    '{\"q\": -5, \"r\": 5, \"s\": 0}',\n    '{\"q\": -4, \"r\": 4, \"s\": -0}',\n    '{\"q\": -3, \"r\": 3, \"s\": -0}',\n    '{\"q\": -5, \"r\": 3, \"s\": 2}',\n    '{\"q\": -6, \"r\": 4, \"s\": 2}',\n    '{\"q\": -4, \"r\": 2, \"s\": 2}',\n    '{\"q\": -4, \"r\": 1, \"s\": 3}',\n    '{\"q\": -7, \"r\": 4, \"s\": 3}',\n    '{\"q\": -8, \"r\": 4, \"s\": 4}',\n    '{\"q\": -9, \"r\": 4, \"s\": 5}',\n    '{\"q\": -10, \"r\": 4, \"s\": 6}',\n    '{\"q\": -11, \"r\": 4, \"s\": 7}',\n    '{\"q\": -12, \"r\": 4, \"s\": 8}',\n    '{\"q\": -6, \"r\": 1, \"s\": 5}',\n    '{\"q\": -6, \"r\": 0, \"s\": 6}',\n    '{\"q\": -6, \"r\": -1, \"s\": 7}',\n    '{\"q\": -6, \"r\": -2, \"s\": 8}',\n    '{\"q\": -2, \"r\": -1, \"s\": 3}',\n    '{\"q\": -2, \"r\": -2, \"s\": 4}']\n\n\n\n\nexport default class BreadthFirstSearch extends Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleExpandClick = this.handleExpandClick.bind(this);\n\n    this.state = {\n      hexSize: 20,\n      //position of the very middle hexagon (changes the numbers seen in hexagons)\n      //decreasing y moves hexagon(0,0,0) upwards, increasing x moves hexagon(0,0,0) to the right\n      hexOrigin: { x: 400, y: 300 },\n      currentHex: {q: 0, r: 0, s: 0, x: 0, y: 0},\n      playerPosition: {q: 0, r: 0, s: 0, x: 400, y: 300},\n      obstacles: DUMMY_OBSTACLES,\n      frontier: [],\n      //storing hexagons starting from playerPosition\n      cameFrom: {}\n    }\n  }\n  componentWillMount(){\n    let hexParametres = this.getHexParametres();\n    this.setState({\n      canvasSize: { canvasWidth: 800, canvasHeight: 600 },\n      hexParametres: hexParametres\n    })\n  }\n\n  componentDidMount(){\n    const { canvasWidth, canvasHeight } = this.state.canvasSize;\n    this.canvasHex.width = canvasWidth;\n    this.canvasHex.height = canvasHeight;\n    this.canvasInteraction.width = canvasWidth;\n    this.canvasInteraction.height = canvasHeight;\n    this.canvasView.width = canvasWidth;\n    this.canvasView.height = canvasHeight;\n    this.getCanvasPosition(this.canvasInteraction);\n    this.drawHex(this.canvasInteraction, this.Point(this.state.playerPosition.x, this.state.playerPosition.y), 1, \"grey\", \"red\", 0.2);\n    this.drawHexes();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if(nextState.currentHex !== this.state.currentHex) {\n      const { q, r, s, x, y } = nextState.currentHex;\n      const { canvasWidth, canvasHeight } = this.state.canvasSize;\n      const ctx = this.canvasInteraction.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n      let currentDistanceLine = nextState.currentDistanceLine;\n\n      for (let i = 0; i <= currentDistanceLine.length - 2; i++) {\n        if(i === 0) {\n          this.drawHex(this.canvasInteraction, this.Point(currentDistanceLine[i].x, currentDistanceLine[i].y), 1, \"black\", \"red\");\n        }else {\n          this.drawHex(this.canvasInteraction, this.Point(currentDistanceLine[i].x, currentDistanceLine[i].y), 1, \"black\", \"grey\");\n        }\n\n      }\n      nextState.obstacles.map((l)=>{\n        const { q, r, s } = JSON.parse(l);\n        const { x, y } = this.hexToPixel(this.Hex(q, r, s))\n        this.drawHex(this.canvasInteraction, this.Point(x, y), 1, \"black\", \"black\");\n\n      })\n      this.drawHex(this.canvasInteraction, this.Point(x, y), 1, \"black\", \"grey\");\n      return true;\n    }\n    if(nextState.cameFrom !== this.state.cameFrom) {\n      const { canvasWidth, canvasHeight } = this.state.canvasSize;\n      const ctx = this.canvasView.getContext(\"2d\");\n      ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n      for(let l in nextState.cameFrom) {\n        const { q, r, s } = JSON.parse(l);\n        const { x, y } = this.hexToPixel(this.Hex(q, r));\n        this.drawHex(this.canvasView, this.Point(x, y), 1, \"black\", \"green\", 0.1);\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n\n  drawHexes() {\n    const { canvasWidth, canvasHeight } = this.state.canvasSize;\n    const { hexWidth, hexHeight, vertDist, horizDist } = this.state.hexParametres;\n    //calculate how many columns are on the left side\n    //hexOrigin is distance from coorindate x = 0 to hex0(middle hexagon)\n    const hexOrigin = this.state.hexOrigin;\n    //dividing the distance from the left side of border(x=0) by\n    //the width of a hexagon to calculate how many hexagons fit on left\n    let qLeftSide = Math.round(hexOrigin.x/horizDist);\n    //calculate how many hexagons will fit on the right\n    let qRightSide = Math.round((canvasWidth - hexOrigin.x)/horizDist);\n    let rTopSide = Math.round(hexOrigin.y/vertDist);\n    let rBottomSide = Math.round((canvasHeight - hexOrigin.y)/vertDist);\n    var p = 0;\n    //screenshot 1 - populates hexigons vertically (populates POSITIVE rows)\n    for(let r = 0; r <= rBottomSide; r++) {\n      if(r%2 === 0 && r !== 0) {\n        p++;\n      }\n      //populates hexigons horizontally in upper half (populates POSITIVE columns)\n      for(let q = -qLeftSide; q <= qRightSide; q++) {\n          const { x, y } = this.hexToPixel(this.Hex(q-p, r));\n          if((x > hexWidth/2 && x < canvasWidth - hexWidth/2) && (y > hexHeight/2 && y < canvasHeight - hexHeight/2)) {\n            this.drawHex(this.canvasHex, this.Point(x,y), 1, \"black\", \"grey\");\n            //passing in canvas and position of each hex(row, column)\n\n          }\n      }\n    }\n    var n = 0;\n    //screenshot 1 - populates hexigons vertically (populates NEGATIVE rows)\n    for(let r = -1; r >= -rTopSide; r--) {\n      if(r%2 !== 0) {\n        n++;\n      }\n      //populates hexigons horizontally in lower half (populates NEGATIVE columns)\n      for(let q = -qLeftSide; q <= qRightSide; q++) {\n          //adding integers to hexToPixel arguments shifts hexagons right\n          const { x, y } = this.hexToPixel(this.Hex(q+n, r));\n          if((x > hexWidth/2 && x < canvasWidth - hexWidth/2) && (y > hexHeight/2 && y < canvasHeight - hexHeight/2)) {\n            this.drawHex(this.canvasHex, this.Point(x,y), 1, \"black\", \"grey\");\n\n          }\n      }\n    }\n  }\n\n  //builds the individual hex shape\n  drawHex(canvasID, center, lineWidth, lineColor, fillColor) {\n    for(let i = 0; i <=5; i++) {\n      let start = this.getHexCornerCoord(center, i);\n      let end = this.getHexCornerCoord(center, i + 1);\n\n      this.fillHex(canvasID, center, fillColor);\n      this.drawLine(canvasID, start, end, lineWidth, lineColor);\n\n    }\n  }\n\n  //get the coordinates of the corner to draw the hex\n    getHexCornerCoord(center, i) {\n      var angle_deg = 60 * i + 30;\n      var angle_rad = Math.PI / 180 * angle_deg;\n      let x = center.x + this.state.hexSize * Math.cos(angle_rad);\n      let y = center.y + this.state.hexSize * Math.sin(angle_rad);\n      return this.Point(x, y);\n    }\n\n    Hex(q, r, s) {\n      return {q: q, r: r, s: s}\n    }\n\n    Point(x, y) {\n      return {x: x, y: y}\n    }\n\n//draws the line that shapes the hex\n  drawLine(canvasID, start, end, lineWidth, lineColor) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.moveTo(start.x, start.y);\n    ctx.strokeStyle = lineColor;\n    ctx.lineWidth = lineWidth;\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  fillHex(canvasID, center, fillColor) {\n    let c0 = this.getHexCornerCoord(center, 0);\n    let c1 = this.getHexCornerCoord(center, 1);\n    let c2 = this.getHexCornerCoord(center, 2);\n    let c3 = this.getHexCornerCoord(center, 3);\n    let c4 = this.getHexCornerCoord(center, 4);\n    let c5 = this.getHexCornerCoord(center, 5);\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.beginPath();\n    ctx.fillStyle = fillColor;\n    ctx.globalAlpha = 0.1;\n    ctx.moveTo(c0.x, c0.y);\n    ctx.lineTo(c1.x, c1.y);\n    ctx.lineTo(c2.x, c2.y);\n    ctx.lineTo(c3.x, c3.y);\n    ctx.lineTo(c4.x, c4.y);\n    ctx.lineTo(c5.x, c5.y);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n//prints the coordinates inside of the hexagons\n  drawHexCoordinates(canvasID, center, h) {\n    const ctx = canvasID.getContext(\"2d\");\n    ctx.fillText(h.q, center.x+6, center.y);\n    ctx.fillText(h.r, center.x-3, center.y+15);\n    ctx.fillText(h.s, center.x-12, center.y);\n  }\n\n\n\n  getHexParametres() {\n    let hexHeight = this.state.hexSize * 2;\n    let hexWidth = Math.sqrt(3)/2 * hexHeight;\n    //vertical distance between hexigons in each row\n    let vertDist = hexHeight * 3/4;\n    let horizDist = hexWidth;\n    return { hexWidth, hexHeight, vertDist, horizDist }\n  }\n\n  hexToPixel(h) {\n    //can change where the bundle of hexes originates on the whole grid\n    let hexOrigin = this.state.hexOrigin;\n    let x = this.state.hexSize * Math.sqrt(3) * (h.q + h.r/2) + hexOrigin.x;\n    let y = this.state.hexSize * 3/2 * h.r + hexOrigin.y;\n    return this.Point(x, y)\n  }\n\n  pixelToHex(p) {\n    let size = this.state.hexSize;\n    let origin = this.state.hexOrigin;\n    let q = ((p.x - origin.x) * Math.sqrt(3)/3 - (p.y - origin.y) / 3) / size\n    let r = (p.y - origin.y) * 2/3 / size\n    return this.Hex(q, r, -q - r);\n  }\n\n  getDistanceLine(hexA, hexB) {\n    let dist = this.cubeDistance(hexA, hexB);\n    var arr = [];\n    for(let i = 0; i <= dist; i++) {\n     let center = this.hexToPixel(this.cubeRound(this.cubeLinearInt(hexA, hexB, 1.0 / dist * i)));\n     arr = [].concat(arr, center);\n    }\n    this.setState({\n      currentDistanceLine: arr\n    })\n  }\n\n\n\n  cubeDirection(direction) {\n    const cubeDirections = [this.Hex(1, 0, -1), this.Hex(1, -1, 0), this.Hex(0, -1, 1),\n    this.Hex(-1, 0, 1), this.Hex(-1, 1, 0), this.Hex(0, 1, -1)];\n    return cubeDirections[direction];\n  }\n\n  cubeLinearInt(hexA, hexB, t) {\n    return this.Hex(this.linearInt(hexA.q, hexB.q, t), this.linearInt(hexA.r, hexB.r, t),\n    this.linearInt(hexA.s, hexB.s, t));\n  }\n\n  linearInt(a, b, t) {\n    return (a + (b - a) * t)\n  }\n\n  cubeAdd(a, b) {\n    return this.Hex(a.q + b.q, a.r + b.r, a.s + b.s);\n  }\n\n  cubeSubstract(hexA, hexB) {\n    return this.Hex(hexA.q - hexB.q, hexA.r - hexB.r, hexA.s - hexB.s);\n  }\n\n  getCubeNeighbor(h, direction) {\n    return this.cubeAdd(h, this.cubeDirection(direction));\n  }\n\n  getNeighbors(h) {\n    var arr = [];\n    for(let i = 0; i <=5; i++) {\n      const { q, r, s } = this.getCubeNeighbor(this.Hex(h.q, h.r, h.s), i);\n      arr.push(this.Hex(q, r, s));\n    }\n    return arr;\n  }\n\n\n\n  cubeRound(cube) {\n    var rx = Math.round(cube.q)\n    var ry = Math.round(cube.r)\n    var rz = Math.round(cube.s)\n    var x_diff = Math.abs(rx - cube.q)\n    var y_diff = Math.abs(ry - cube.r)\n    var z_diff = Math.abs(rz - cube.s)\n    if(x_diff > y_diff && x_diff > z_diff) {\n      rx = -ry-rz\n    }\n    else if(y_diff > z_diff) {\n      ry = -rx-rz\n    }\n    else{\n      rz = -rx-ry\n    }\n    return this.Hex(rx, ry, rz)\n  }\n\n\n\n  cubeDistance(hexA, hexB) {\n    const { q, r, s } = this.cubeSubstract(hexA, hexB);\n    return (Math.abs(q) + Math.abs(r) + Math.abs(s)) / 2;\n  }\n\n\n  drawNeighbors(h) {\n    for(let i = 0; i <= 5; i++) {\n      const { q, r, s } = this.getCubeNeighbor(this.Hex(h.q, h.r, h.s), i);\n      const { x, y } = this.hexToPixel(this.Hex(q, r, s));\n      this.drawHex(this.canvasInteraction, this.Point(x, y), \"red\", 2);\n    }\n  }\n\n\n    getCanvasPosition(canvasID) {\n      let rect = canvasID.getBoundingClientRect();\n      this.setState({\n         canvasPosition: { left:rect.left, right: rect.right, top: rect.top, bottom: rect.bottom }\n      })\n    }\n\n  handleMouseMove(e) {\n    const { canvasWidth, canvasHeight } = this.state.canvasSize;\n    const { hexWidth, hexHeight, vertDist, horizDist } = this.state.hexParametres;\n    //const { left, right, top, bottom } = this.state.canvasPosition;\n    //changing the number at the end affects result exponentially\n    var canvasPos = document.getElementById(\"canv3\");\n    let rect = canvasPos.getBoundingClientRect();\n    let offsetX = e.pageX - rect.left;\n    let offsetY = (e.pageY - (window.pageYOffset + rect.top));\n\n\n\n\n\n\n    const { q, r, s } = this.cubeRound(this.pixelToHex(this.Point(offsetX, offsetY)));\n    const { x, y } = this.hexToPixel(this.Hex(q, r, s));\n\n   let playerPosition = this.state.playerPosition;\n\n\n    this.getDistanceLine(this.Hex(0,0,0), this.Hex(q,r,s));\n\n    if((x > hexWidth/2 && x < canvasWidth - hexWidth/2) && (y > hexHeight/2 && y < canvasHeight - hexHeight/2)) {\n      this.setState({\n        currentHex: {q, r, s, x, y}\n      })\n    }\n\n  }\n\n  handleClick() {\n    this.addObstacles();\n  }\n\n  addObstacles() {\n    const { q, r, s } = this.state.currentHex;\n    let obstacles = this.state.obstacles;\n    if(!obstacles.includes(JSON.stringify(this.Hex(q, r, s)))) {\n      obstacles = [].concat(obstacles, JSON.stringify(this.Hex(q, r, s)))\n    } else {\n      obstacles.map((l,i) => {\n        if(l === JSON.stringify(this.Hex(q, r, s))) {\n          obstacles = obstacles.slice(0, i).concat(obstacles.slice(i+1));\n        }\n      })\n    }\n    console.log({\"q\":q, \"r\":r, \"s\":s})\n    this.setState({\n      obstacles: obstacles\n    })\n  }\n\n  handleExpandClick() {\n    var frontier = this.state.frontier;\n    var cameFrom = this.state.cameFrom;\n    if(frontier == 0) {\n      frontier.push(this.Hex(0,0,0));\n      cameFrom[JSON.stringify(this.Hex(0,0,0))] = JSON.stringify(null);\n    }\n    let n = 0;\n    while(n < 1) {\n      var current = frontier.shift();\n      let arr = this.getNeighbors(current);\n      arr.map((l) => {\n        if(!cameFrom.hasOwnProperty(JSON.stringify(l)) && !this.state.obstacles.includes(JSON.stringify(l))) {\n          frontier.push(l);\n          cameFrom[JSON.stringify(l)] = JSON.stringify(current);\n        }\n      })\n      n++\n    }\n    cameFrom = Object.assign({}, cameFrom);\n    this.setState({\n      cameFrom: cameFrom\n    })\n  }\n\n  resetSketch() {\n  window.location.reload();\n  }\n\n\nrender() {\n    return (\n      <section id=\"BFS\">\n        <div className=\"description25\">\n        <b id='bold'>Real World Application:</b><br/>\n        - The BFS algorithm is taught as a common algorithm to computer science students.<br/>\n        - It can be used to solve multiple graph theory problems.<br/>\n        <b id=\"bold\">How to use:</b> Hit expand to see Breadth First Search carried out starting\n          from the middle node.<br/>\n\n        </div>\n\n          <button\n              className=\"reset1\"\n              onClick={ this.resetSketch }\n              style= {{ textAlign: \"center\" }}\n            >\n              Reset\n            </button>\n\n            <button\n              className=\"expandButton1\"\n              color=\"blue\"\n              style={{textAlign: \"center\"}}\n              onClick={this.handleExpandClick}>\n              Expand\n            </button>\n\n            <br></br>\n        <canvas id=\"canv4\" ref={canvasHex => this.canvasHex = canvasHex }> </canvas>\n        <canvas id=\"canv3\" ref={canvasCoordinates => this.canvasCoordinates = canvasCoordinates }> </canvas>\n        <canvas id=\"canv2\" ref={canvasView => this.canvasView = canvasView }> </canvas>\n        <canvas id=\"canv1\" ref={canvasInteraction => this.canvasInteraction = canvasInteraction} onMouseMove = {this.handleMouseMove} onClick = {this.handleClick}> </canvas>\n    </section>\n    )\n  }\n}","import React, {Component} from 'react';\n\nvar DUMMY_OBSTACLES = ['{\"q\":4,\"r\":-2,\"s\":-2}', \n'{\"q\":4,\"r\":-1,\"s\":-3}', '{\"q\":4,\"r\":0,\"s\":-4}', \n'{\"q\":4,\"r\":1,\"s\":-5}', '{\"q\":3,\"r\":2,\"s\":-5}', \n'{\"q\":2,\"r\":3,\"s\":-5}', '{\"q\":1,\"r\":4,\"s\":-5}', \n'{\"q\":0,\"r\":5,\"s\":-5}', '{\"q\":-1,\"r\":6,\"s\":-5}', \n'{\"q\":-2,\"r\":7,\"s\":-5}', '{\"q\":4,\"r\":-4,\"s\":0}', \n'{\"q\":3,\"r\":-4,\"s\":1}', '{\"q\":2,\"r\":-4,\"s\":2}', \n'{\"q\":1,\"r\":-4,\"s\":3}', '{\"q\":2,\"r\":-5,\"s\":3}', \n'{\"q\":3,\"r\":-6,\"s\":3}', '{\"q\":4,\"r\":-7,\"s\":3}', \n'{\"q\":5,\"r\":-9,\"s\":4}', '{\"q\":6,\"r\":-9,\"s\":3}', \n'{\"q\":7,\"r\":-9,\"s\":2}', '{\"q\":8,\"r\":-9,\"s\":1}', \n'{\"q\":9,\"r\":-9,\"s\":0}', '{\"q\":10,\"r\":-9,\"s\":-1}', \n'{\"q\":11,\"r\":-9,\"s\":-2}', '{\"q\":12,\"r\":-9,\"s\":-3}', \n'{\"q\":13,\"r\":-9,\"s\":-4}', '{\"q\":14,\"r\":-9,\"s\":-5}', \n'{\"q\":15,\"r\":-9,\"s\":-6}', '{\"q\":15,\"r\":-8,\"s\":-7}', \n'{\"q\":14,\"r\":-7,\"s\":-7}', '{\"q\":14,\"r\":-6,\"s\":-8}', \n'{\"q\":13,\"r\":-5,\"s\":-8}', '{\"q\":13,\"r\":-4,\"s\":-9}', \n'{\"q\":12,\"r\":-3,\"s\":-9}', '{\"q\":12,\"r\":-2,\"s\":-10}', \n'{\"q\":11,\"r\":-1,\"s\":-10}', '{\"q\":11,\"r\":0,\"s\":-11}', \n'{\"q\":10,\"r\":1,\"s\":-11}', '{\"q\":10,\"r\":2,\"s\":-12}', \n'{\"q\":9,\"r\":3,\"s\":-12}', '{\"q\":9,\"r\":4,\"s\":-13}', \n'{\"q\":8,\"r\":5,\"s\":-13}', '{\"q\":8,\"r\":6,\"s\":-14}', \n'{\"q\":7,\"r\":7,\"s\":-14}', '{\"q\":7,\"r\":8,\"s\":-15}', \n'{\"q\":6,\"r\":9,\"s\":-15}', '{\"q\":5,\"r\":9,\"s\":-14}', \n'{\"q\":4,\"r\":9,\"s\":-13}', '{\"q\":3,\"r\":9,\"s\":-12}', \n'{\"q\":2,\"r\":9,\"s\":-11}', '{\"q\":1,\"r\":9,\"s\":-10}', \n'{\"q\":0,\"r\":9,\"s\":-9}', '{\"q\":-1,\"r\":9,\"s\":-8}', \n'{\"q\":-2,\"r\":9,\"s\":-7}', '{\"q\":-3,\"r\":9,\"s\":-6}', \n'{\"q\":-4,\"r\":9,\"s\":-5}', '{\"q\":-5,\"r\":9,\"s\":-4}', \n'{\"q\":-5,\"r\":8,\"s\":-3}', '{\"q\":-5,\"r\":7,\"s\":-2}', \n'{\"q\":-5,\"r\":6,\"s\":-1}', '{\"q\":-5,\"r\":5,\"s\":0}', \n'{\"q\":-4,\"r\":4,\"s\":0}', '{\"q\":-3,\"r\":3,\"s\":0}', \n'{\"q\":-2,\"r\":-1,\"s\":3}', '{\"q\":-2,\"r\":-2,\"s\":4}', \n'{\"q\":-4,\"r\":1,\"s\":3}', '{\"q\":-4,\"r\":2,\"s\":2}', \n'{\"q\":-5,\"r\":3,\"s\":2}', '{\"q\":-7,\"r\":4,\"s\":3}', \n'{\"q\":-6,\"r\":4,\"s\":2}', '{\"q\":-8,\"r\":4,\"s\":4}', \n'{\"q\":-9,\"r\":4,\"s\":5}', '{\"q\":-10,\"r\":4,\"s\":6}', \n'{\"q\":-11,\"r\":4,\"s\":7}', '{\"q\":-12,\"r\":4,\"s\":8}', \n'{\"q\":-12,\"r\":2,\"s\":10}', '{\"q\":-12,\"r\":3,\"s\":9}', \n'{\"q\":-13,\"r\":4,\"s\":9}', '{\"q\":-13,\"r\":5,\"s\":8}', \n'{\"q\":-14,\"r\":6,\"s\":8}', '{\"q\":-14,\"r\":7,\"s\":7}', \n'{\"q\":-15,\"r\":8,\"s\":7}', '{\"q\":-15,\"r\":9,\"s\":6}', \n'{\"q\":-14,\"r\":9,\"s\":5}', '{\"q\":-13,\"r\":9,\"s\":4}', \n'{\"q\":-12,\"r\":9,\"s\":3}', '{\"q\":-11,\"r\":9,\"s\":2}', \n'{\"q\":-10,\"r\":9,\"s\":1}', '{\"q\":-9,\"r\":9,\"s\":0}', \n'{\"q\":-8,\"r\":9,\"s\":-1}', '{\"q\":-7,\"r\":9,\"s\":-2}', \n'{\"q\":-6,\"r\":9,\"s\":-3}', '{\"q\":-11,\"r\":1,\"s\":10}', \n'{\"q\":-11,\"r\":0,\"s\":11}', '{\"q\":-10,\"r\":-1,\"s\":11}', \n'{\"q\":-10,\"r\":-2,\"s\":12}', '{\"q\":-9,\"r\":-3,\"s\":12}', \n'{\"q\":-9,\"r\":-4,\"s\":13}', '{\"q\":-8,\"r\":-5,\"s\":13}', \n'{\"q\":-8,\"r\":-6,\"s\":14}', '{\"q\":-7,\"r\":-7,\"s\":14}', \n'{\"q\":-7,\"r\":-8,\"s\":15}', '{\"q\":-6,\"r\":-9,\"s\":15}', \n'{\"q\":-5,\"r\":-9,\"s\":14}', '{\"q\":-4,\"r\":-9,\"s\":13}', \n'{\"q\":-3,\"r\":-9,\"s\":12}', '{\"q\":-2,\"r\":-9,\"s\":11}', \n'{\"q\":-1,\"r\":-9,\"s\":10}', '{\"q\":0,\"r\":-9,\"s\":9}', \n'{\"q\":1,\"r\":-9,\"s\":8}', '{\"q\":2,\"r\":-9,\"s\":7}', \n'{\"q\":3,\"r\":-9,\"s\":6}', '{\"q\":4,\"r\":-9,\"s\":5}', \n'{\"q\":-2,\"r\":-8,\"s\":10}', '{\"q\":-3,\"r\":-7,\"s\":10}', \n'{\"q\":-4,\"r\":-6,\"s\":10}', '{\"q\":-5,\"r\":-5,\"s\":10}', \n'{\"q\":-6,\"r\":-4,\"s\":10}', '{\"q\":-7,\"r\":-4,\"s\":11}', \n'{\"q\":-6,\"r\":-2,\"s\":8}', '{\"q\":-6,\"r\":-1,\"s\":7}', \n'{\"q\":-6,\"r\":0,\"s\":6}', '{\"q\":-6,\"r\":1,\"s\":5}', \n'{\"q\":7,\"r\":-2,\"s\":-5}', '{\"q\":8,\"r\":-2,\"s\":-6}', \n'{\"q\":9,\"r\":-3,\"s\":-6}', '{\"q\":10,\"r\":-3,\"s\":-7}', \n'{\"q\":4,\"r\":5,\"s\":-9}', '{\"q\":4,\"r\":6,\"s\":-10}', \n'{\"q\":5,\"r\":6,\"s\":-11}', '{\"q\":5,\"r\":7,\"s\":-12}']\n\n\nexport default class BFSExtra extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseMove = this.handleMouseMove.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    //possibly but this.breadthFirstSearch = this.breadthfirstsearch.bind(this)\n\n\n    this.state = {\n      hexSize: 20,\n      //position of the very middle hexagon (changes the numbers seen in hexagons)\n      //decreasing y moves hexagon(0,0,0) upwards, increasing x moves hexagon(0,0,0) to the right\n      hexOrigin: { x: 400, y: 300 },\n      currentHex: {q: 0, r: 0, s: 0, x: 0, y: 0},\n      playerPosition: { q: 0, r: 0, s: 0 },\n      obstacles: DUMMY_OBSTACLES,\n      cameFrom: {},\n      hexPathMap: [],\n      path: []\n    }\n  }\n  componentWillMount(){\n    let hexParametres =  this.getHexParametres();\n    this.setState({\n      canvasSize: { canvasWidth: 800, canvasHeight: 600 },\n      hexParametres: hexParametres\n    })\n  }\n\n  componentDidMount(){\n    const { canvasWidth, canvasHeight } = this.state.canvasSize;\n    this.canvasHex.width = canvasWidth;\n    this.canvasHex.height = canvasHeight;\n    this.canvasInteraction.width = canvasWidth;\n    this.canvasInteraction.height = canvasHeight;\n    this.canvasView.width = canvasWidth;\n    this.canvasView.height = canvasHeight;\n    this.getCanvasPosition(this.canvasInteraction);\n    this.drawHex(this.canvasInteraction, this.Point(this.state.playerPosition.x, this.state.playerPosition.y), 1, \"grey\", \"red\", 0.2);\n    this.drawHexes();\n    this.drawObstacles();\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if(nextState.currentHex !== this.state.currentHex) {\n  const { q, r, s, x, y } = nextState.currentHex;\n  const { canvasWidth, canvasHeight } = this.state.canvasSize;\n  const ctx = this.canvasInteraction.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n  /*this.drawNeighbors(this.Hex(q, r, s));*/\n  this.drawPath();\n  return true;\n}\n  if(nextState.cameFrom !== this.state.cameFrom) {\n  const { canvasWidth, canvasHeight } = this.state.canvasSize;\n  const ctx = this.canvasView.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n  for (let l in nextState.cameFrom) {\n    const { q, r, s } = JSON.parse(l);\n    const { x, y } = this.hexToPixel(this.Hex(q, r));\n    this.drawHex(this.canvasView, this.Point(x, y), 1, \"black\", \"green\", 0.1);\n    var from = JSON.parse(nextState.cameFrom[l]);\n    var fromCoord = this.hexToPixel(this.Hex(from.q, from.r));\n    this.drawArrow(fromCoord.x, fromCoord.y, x, y);\n  }\n  return true;\n  }\n  return false;\n  }\n\n\n  drawHexes() {\n    const { canvasWidth, canvasHeight } = this.state.canvasSize;\n  const { hexWidth, hexHeight, vertDist, horizDist } = this.state.hexParametres;\n  const hexOrigin = this.state.hexOrigin;\n  let qLeftSide = Math.round(hexOrigin.x/horizDist);\n  let qRightSide = Math.round((canvasWidth - hexOrigin.x)/horizDist);\n  let rTopSide = Math.round(hexOrigin.y/vertDist);\n  let rBottomSide = Math.round((canvasHeight - hexOrigin.y)/vertDist);\n  var hexPathMap = [];\n  var p = 0;\n  for (let r = 0; r <= rBottomSide; r++) {\n    if(r%2 == 0 && r !==0) {\n      p++;\n    }\n    for (let q = -qLeftSide; q <= qRightSide; q++) {\n        const { x, y } = this.hexToPixel(this.Hex(q-p, r));\n        if ((x >hexWidth/2 && x < canvasWidth - hexWidth/2) && (y > hexHeight/2 && y < canvasHeight - hexHeight/2)) {\n          this.drawHex(this.canvasHex, this.Point(x,y), 1, \"black\", \"grey\");\n          /*this.drawHexCoordinates(this.canvasHex, this.Point(x,y), this.Hex(q-p, r, -(q - p) - r));*/\n          var bottomH = JSON.stringify(this.Hex(q-p, r, -(q - p) - r));\n          if(!this.state.obstacles.includes(bottomH)) {\n            hexPathMap.push(bottomH);\n          }\n        }\n    }\n  }\nvar n = 0;\n  for (let r = -1; r >= -rTopSide; r--) {\n    if(r%2 !== 0) {\n      n++;\n    }\n    for (let q = -qLeftSide; q <= qRightSide; q++) {\n        const { x, y } = this.hexToPixel(this.Hex(q+n, r));\n          if ((x >hexWidth/2 && x < canvasWidth - hexWidth/2) && (y > hexHeight/2 && y < canvasHeight - hexHeight/2)) {\n        this.drawHex(this.canvasHex, this.Point(x,y), 1, \"black\", \"grey\");\n        /*this.drawHexCoordinates(this.canvasHex, this.Point(x,y), this.Hex(q+n, r, - (q + n) - r));*/\n        var topH = JSON.stringify(this.Hex(q+n, r, - (q + n) - r));\n        if(!this.state.obstacles.includes(topH)) {\n          hexPathMap.push(topH);\n        }\n      }\n    }\n  }\n  hexPathMap = [].concat(hexPathMap);\n  this.setState(\n    {hexPathMap: hexPathMap},\n    this.breadthFirstSearchCallback = () => this.breadthFirstSearch(this.state.playerPosition)\n  )\n  }\n\n  //builds the individual hex shape\n  drawHex(canvasID, center, lineWidth, lineColor, fillColor) {\n  for (let i = 0; i <= 5; i++) {\n    let start = this.getHexCornerCoord(center, i);\n    let end = this.getHexCornerCoord(center, i + 1);\n    this.fillHex(canvasID, center, fillColor);\n    this.drawLine(canvasID, start, end, lineWidth, lineColor);\n  }\n}\n\n  //get the coordinates of the corner to draw the hex\n  getHexCornerCoord(center, i) {\n   let angle_deg = 60 * i   + 30;\n   let angle_rad = Math.PI / 180 * angle_deg;\n   let x = center.x + this.state.hexSize * Math.cos(angle_rad);\n  let y = center.y + this.state.hexSize * Math.sin(angle_rad);\n  return this.Point(x, y);\n }\n\n getHexParametres() {\n  let hexHeight = this.state.hexSize * 2;\n  let hexWidth = Math.sqrt(3)/2 * hexHeight;\n  let vertDist = hexHeight * 3/4;\n  let horizDist = hexWidth;\n  return { hexWidth, hexHeight, vertDist, horizDist }\n}\n\ngetCanvasPosition(canvasID) {\n  let rect = canvasID.getBoundingClientRect();\n  this.setState({\n    canvasPosition: { left:rect.left, right: rect.right, top: rect.top, bottom: rect.bottom }\n  })\n}\n   hexToPixel(h) {\n     let hexOrigin = this.state.hexOrigin;\n     let x = this.state.hexSize * Math.sqrt(3) * (h.q + h.r/2) + hexOrigin.x;\n     let y = this.state.hexSize * 3/2 * h.r + hexOrigin.y;\n     return this.Point(x, y)\n   }\n   pixelToHex(p) {\n     let size = this.state.hexSize;\n     let origin = this.state.hexOrigin;\n     let q = ((p.x - origin.x) * Math.sqrt(3)/3 - (p.y - origin.y) / 3) / size\n     let r = (p.y - origin.y) * 2/3 / size\n     return this.Hex(q, r, - q - r);\n   }\ncubeDirection(direction) {\n  const cubeDirections = [this.Hex(1, 0, -1), this.Hex(1, -1, 0), this.Hex(0, -1, 1),\n                          this.Hex(-1, 0, 1), this.Hex(-1, 1, 0), this.Hex(0, 1, -1)];\nreturn cubeDirections[direction];\n}\ncubeAdd(a, b) {\n  return this.Hex(a.q + b.q, a.r + b.r, a.s + b.s);\n}\ncubeSubstract(hexA, hexB) {\n  return this.Hex(hexA.q - hexB.q, hexA.r - hexB.r, hexA.s - hexB.s);\n}\ngetCubeNeighbor(h, direction) {\n  return this.cubeAdd(h, this.cubeDirection(direction));\n}\ngetNeighbors(h) {\n  var arr = [];\n  for (let i = 0; i <= 5; i++) {\n    const { q, r, s } = this.getCubeNeighbor(this.Hex(h.q, h.r, h.s), i);\n    arr.push(this.Hex(q, r, s));\n  }\n  return arr;\n}\n   cubeRound(cube) {\n     var rx = Math.round(cube.q)\n     var ry = Math.round(cube.r)\n     var rz = Math.round(cube.s)\n     var x_diff = Math.abs(rx - cube.q)\n     var y_diff = Math.abs(ry - cube.r)\n     var z_diff = Math.abs(rz - cube.s)\n     if (x_diff > y_diff && x_diff > z_diff) {\n       rx = -ry-rz;\n     } else if (y_diff > z_diff) {\n          ry = -rx-rz\n     } else {\n          rz = -rx-ry\n     }\n     return this.Hex(rx, ry, rz)\n   }\ngetDistanceLine(hexA, hexB) {\n  let dist = this.cubeDistance(hexA, hexB);\n  var arr = [];\n  for (let i = 0; i <= dist; i++) {\n  let center = this.hexToPixel(this.cubeRound(this.cubeLinearInt(hexA, hexB, 1.0 / dist * i)));\n  arr = [].concat(arr, center);\n  }\n  this.setState({\n    currentDistanceLine: arr\n  })\n}\ncubeDistance(hexA, hexB) {\n  const { q, r, s } = this.cubeSubstract(hexA, hexB);\n  return (Math.abs(q) + Math.abs(r) + Math.abs(s)) / 2;\n}\ncubeLinearInt(hexA, hexB, t) {\n  return this.Hex(this.linearInt(hexA.q, hexB.q, t), this.linearInt(hexA.r, hexB.r, t), this.linearInt(hexA.s, hexB.s, t));\n}\nlinearInt(a, b, t) {\n    return (a + (b - a) * t)\n}\nPoint(x, y) {\n     return {x: x, y: y}\n   }\n   Hex(q, r, s) {\n     return {q: q, r: r, s: s}\n   }\n   drawLine(canvasID, start, end, lineWidth, lineColor) {\n     const ctx = canvasID.getContext(\"2d\");\n     ctx.beginPath();\n     ctx.moveTo(start.x, start.y);\n     ctx.strokeStyle = lineColor;\n     ctx.lineWidth = lineWidth;\n     ctx.lineTo(end.x, end.y);\n     ctx.stroke();\n     ctx.closePath();\n   }\n\n   fillHex(canvasID, center, fillColor) {\n     let c0 = this.getHexCornerCoord(center, 0);\n     let c1 = this.getHexCornerCoord(center, 1);\n     let c2 = this.getHexCornerCoord(center, 2);\n     let c3 = this.getHexCornerCoord(center, 3);\n     let c4 = this.getHexCornerCoord(center, 4);\n     let c5 = this.getHexCornerCoord(center, 5);\n     const ctx = canvasID. getContext(\"2d\");\n     ctx.beginPath();\n     ctx.fillStyle = fillColor;\n     ctx.globalAlpha = 0.1;\n     ctx.moveTo(c0.x, c0.y);\n     ctx.lineTo(c1.x, c1.y);\n     ctx.lineTo(c2.x, c2.y);\n     ctx.lineTo(c3.x, c3.y);\n     ctx.lineTo(c4.x, c4.y);\n     ctx.lineTo(c5.x, c5.y);\n     ctx.closePath();\n     ctx.fill();\n   }\n   drawHexCoordinates(canvasID, center, h) {\n     const ctx = canvasID.getContext(\"2d\");\n     ctx.fillText(h.q, center.x+6, center.y);\n     ctx.fillText(h.r, center.x-3, center.y+15);\n     ctx.fillText(h.s, center.x-12, center.y);\n   }\ndrawNeighbors(h) {\n  for (let i = 0; i <= 5; i++) {\n    const { q, r, s} = this.getCubeNeighbor(this.Hex(h.q, h.r, h.s), i);\n    const { x, y } = this.hexToPixel(this.Hex(q, r, s));\n    this.drawHex(this.canvasInteraction, this.Point(x, y), \"red\", 2);\n  }\n}\n\nhandleMouseMove(e) {\n     const { canvasWidth, canvasHeight } = this.state.canvasSize;\n     const { hexWidth, hexHeight, vertDist, horizDist } = this.state.hexParametres;\n     const { left, right, top, bottom } = this.state.canvasPosition;\n     var canvasPos = document.getElementById(\"canv7\");\n     let rect = canvasPos.getBoundingClientRect();\n     let offsetX = e.pageX - rect.left;\n     let offsetY = (e.pageY - (window.pageYOffset + rect.top));\n     const { q, r, s } = this.cubeRound(this.pixelToHex(this.Point(offsetX, offsetY)));\n     const { x, y } = this.hexToPixel(this.Hex(q, r, s));\n     let playerPosition = this.state.playerPosition;\n     this.getDistanceLine(this.Hex(0,0,0), this.Hex(q,r,s));\n     /*this.getDistanceLine(this.Hex(0,0,0), this.Hex(q,r,s));*/\n     this.getPath(this.Hex(playerPosition.q, playerPosition.r, playerPosition.s), this.Hex(q,r,s));\n      if ((x >hexWidth/2 && x < canvasWidth - hexWidth/2) && (y > hexHeight/2 && y < canvasHeight - hexHeight/2)) {\nthis.setState({\n  currentHex: {q, r, s, x, y}\n})\n}\n   }\n\n   getPath(start, current) {\n  const { cameFrom } = this.state;\n  start = JSON.stringify(start);\n  current = JSON.stringify(current);\n  if(cameFrom[current] != undefined) {\n    var path = [current];\n    while (current != start) {\n      current = cameFrom[current];\n      path.push(current);\n    }\n    path = [].concat(path);\n    this.setState({\n      path: path\n    })\n  }\n}\n\ndrawPath() {\nlet path = this.state.path;\nfor (let i = 0; i <= path.length - 1; i++) {\n  const {q,r} = JSON.parse(path[i]);\n  const {x,y} = this.hexToPixel(this.Hex(q,r));\n  this.drawHex(this.canvasInteraction, this.Point(x,y), 1, \"black\", \"red\");\n}\n}\n\ndrawArrow(fromx, fromy, tox, toy){\n                var ctx = this.canvasView.getContext(\"2d\");\n                var headlen = 5;\n                var angle = Math.atan2(toy-fromy,tox-fromx);\n                ctx.beginPath();\n                ctx.moveTo(fromx, fromy);\n                ctx.lineTo(tox, toy);\n                ctx.strokeStyle = \"#cc0000\";\n                ctx.lineWidth = 3;\n                ctx.stroke();\n                ctx.beginPath();\n                ctx.moveTo(tox, toy);\n                ctx.globalAlpha = 0.3;\n                ctx.lineTo(tox-headlen*Math.cos(angle-Math.PI/7),toy-headlen*Math.sin(angle-Math.PI/7));\n                ctx.lineTo(tox-headlen*Math.cos(angle+Math.PI/7),toy-headlen*Math.sin(angle+Math.PI/7));\n                ctx.lineTo(tox, toy);\n                ctx.lineTo(tox-headlen*Math.cos(angle-Math.PI/7),toy-headlen*Math.sin(angle-Math.PI/7));\n                ctx.strokeStyle = \"#cc0000\";\n                ctx.lineWidth = 5;\n                ctx.stroke();\n                ctx.fillStyle = \"#cc0000\";\n                ctx.fill();\n            }\n\n            handleClick() {\n\nconst { currentHex, cameFrom } = this.state;\nconst { q,r,s } = currentHex;\nif(cameFrom[JSON.stringify(this.Hex(q,r,s))]) {\n  this.setState(\n    {playerPosition: this.Hex(q,r,s)},\n    this.breadthFirstSearchCallback = () => this.breadthFirstSearch(this.state.playerPosition)\n  )\n}\n   }\n\n   drawObstacles() {\n  this.state.obstacles.map((l) => {\n    const {q,r,s} = JSON.parse(l);\n    const {x,y} = this.hexToPixel(this.Hex(q,r,s));\n    this.drawHex(this.canvasHex, this.Point(x,y), 1, \"black\", \"black\");\n  })\n}\n\nbreadthFirstSearch(playerPosition) {\nvar frontier = [playerPosition];\nvar cameFrom = {};\ncameFrom[JSON.stringify(playerPosition)] = JSON.stringify(playerPosition);\nwhile (frontier.length != 0) {\n  var current = frontier.shift();\n  let arr = this.getNeighbors(current);\n  arr.map((l) => {\n\n    if(!cameFrom.hasOwnProperty(JSON.stringify(l)) && this.state.hexPathMap.includes(JSON.stringify(l))) {\n      frontier.push(l);\n      cameFrom[JSON.stringify(l)] = JSON.stringify(current);\n    }\n  })\n\n}\ncameFrom = Object.assign({}, cameFrom);\nthis.setState({\n  cameFrom: cameFrom\n})\n}\n\n\n\n  resetSketch() {\n  window.location.reload();\n  }\n\n\nrender() {\n    return (\n      <div className=\"BFSExtra\">\n        <div className=\"title2\">\n        Breadth First Search\n        </div>\n        <div className=\"description2\">\n        <b id=\"bold\">What is it? </b>\n        <br/>\n        Breadth-First Search is an algorithm for traversing or searching tree or graph data structures.<br/>\n        It starts at the tree root and explores all of the neighboring nodes at the present depth before <br/>\n        moving on to the nodes at the next depth level.<br/>\n        \n        <br/>\n          <b id=\"bold\">How to use: </b>        <br/>\n        Click different areas of the board to see how BFS algorithm finds the shortest path!<br></br>\n          <br/>\n\n          <b id=\"bold\">How it works:</b><br/>\n        The shortest path is being calculated live by giving a distance value to every<br></br>\n        node on the board. The red arrows indicate the path that the algorithm is taking\n        from node to node.<br></br>\n        *View the second board below to see how the shortest path is determined step by step.<br/>\n        </div>\n        <canvas id=\"canv8\" ref={canvasHex => this.canvasHex = canvasHex }> </canvas>\n        <canvas id=\"canv7\" ref={canvasCoordinates => this.canvasCoordinates = canvasCoordinates }> </canvas>\n        <canvas id=\"canv6\" ref={canvasView => this.canvasView = canvasView }> </canvas>\n        <canvas id=\"canv5\" ref={canvasInteraction => this.canvasInteraction = canvasInteraction} onMouseMove = {this.handleMouseMove} onClick={this.handleClick}> </canvas>\n\n    </div>\n    )\n\n  }\n\n}","import React, { Component } from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\n\nexport default class AStar extends Component {\n    sketch(p){\n\n        // Function to delete element from the array\n        function removeFromArray(arr, elt) {\n            // Could use indexOf here instead to be more efficient\n            for (let i = arr.length - 1; i >= 0; i--) {\n              if (arr[i] == elt) {\n                arr.splice(i, 1);\n              }\n            }\n          }\n          \n          // An educated guess of how far it is between two points\n          function heuristic(a, b) {\n            let d = p.dist(a.i, a.j, b.i, b.j);\n            // let d = abs(a.i - b.i) + abs(a.j - b.j);\n            return d;\n          }\n          \n          // How many columns and rows?\n          let cols = 50;\n          let rows = 50;\n          \n          // This will be the 2D array\n          let grid = new Array(cols);\n          \n          // Open and closed set\n          let openSet = [];\n          let closedSet = [];\n          \n          // Start and end\n          let start;\n          let end;\n          \n          // Width and height of each cell of grid\n          let w, h;\n          \n          // The road taken\n          let path = [];\n          \n            p.setup = () => {\n            p.createCanvas(800, 800);\n            console.log('A*');\n          \n            // Grid cell size\n            w = p.width / cols;\n            h = p.height / rows;\n          \n            // Making a 2D array\n            for (let i = 0; i < cols; i++) {\n              grid[i] = new Array(rows);\n            }\n          \n            for (let i = 0; i < cols; i++) {\n              for (let j = 0; j < rows; j++) {\n                grid[i][j] = new Spot(i, j);\n              }\n            }\n          \n            // All the neighbors\n            for (let i = 0; i < cols; i++) {\n              for (let j = 0; j < rows; j++) {\n                grid[i][j].addNeighbors(grid);\n              }\n            }\n          \n            // Start and end\n            start = grid[0][0];\n            end = grid[cols - 1][rows - 1];\n            start.wall = false;\n            end.wall = false;\n          \n            // openSet starts with beginning only\n            openSet.push(start);\n\n            let button = p.createButton(\"visualize\");\n            button.mousePressed(resetSketch);\n            button.parent(\"resetAStar\");\n          }\n          function resetSketch() {\n            window.location.reload();\n        }\n          \n          p.draw = () => {\n            // Am I still searching?\n            if (openSet.length > 0) {\n              // Best next option\n              let winner = 0;\n              for (let i = 0; i < openSet.length; i++) {\n                if (openSet[i].f < openSet[winner].f) {\n                  winner = i;\n                }\n              }\n              let current = openSet[winner];\n          \n              // Did I finish?\n              if (current === end) {\n                p.noLoop();\n                console.log('DONE!');\n              }\n          \n              // Best option moves from openSet to closedSet\n              removeFromArray(openSet, current);\n              closedSet.push(current);\n          \n              // Check all the neighbors\n              let neighbors = current.neighbors;\n              for (let i = 0; i < neighbors.length; i++) {\n                let neighbor = neighbors[i];\n          \n                // Valid next spot?\n                if (!closedSet.includes(neighbor) && !neighbor.wall) {\n                  let tempG = current.g + heuristic(neighbor, current);\n          \n                  // Is this a better path than before?\n                  let newPath = false;\n                  if (openSet.includes(neighbor)) {\n                    if (tempG < neighbor.g) {\n                      neighbor.g = tempG;\n                      newPath = true;\n                    }\n                  } else {\n                    neighbor.g = tempG;\n                    newPath = true;\n                    openSet.push(neighbor);\n                  }\n          \n                  // Yes, it's a better path\n                  if (newPath) {\n                    neighbor.h = heuristic(neighbor, end);\n                    neighbor.f = neighbor.g + neighbor.h;\n                    neighbor.previous = current;\n                  }\n                }\n              }\n              // Uh oh, no solution\n            } else {\n              console.log('no solution');\n              p.noLoop();\n              return;\n            }\n          \n            // Draw current state of everything\n            p.background(255);\n          \n            for (let i = 0; i < cols; i++) {\n              for (let j = 0; j < rows; j++) {\n                grid[i][j].show();\n              }\n            }\n          \n            for (let i = 0; i < closedSet.length; i++) {\n              closedSet[i].show(p.color(255, 0, 0, 50));\n            }\n          \n            for (let i = 0; i < openSet.length; i++) {\n              openSet[i].show(p.color(0, 255, 0, 50));\n            }\n          \n            // Find the path by working backwards\n            path = [];\n            let temp = path;\n            path.push(temp);\n            while (temp.previous) {\n              path.push(temp.previous);\n              temp = temp.previous;\n            }\n          \n            // for (let i = 0; i < path.length; i++) {\n            // path[i].show(color(0, 0, 255));\n            //}\n          \n            // Drawing path as continuous line\n            p.noFill();\n            p.stroke(255, 0, 200);\n            p.strokeWeight(w / 2);\n            p.beginShape();\n            for (let i = 0; i < path.length; i++) {\n              p.vertex(path[i].i * w + w / 2, path[i].j * h + h / 2);\n            }\n            p.endShape();\n          }\n          // An object to describe a spot in the grid\n         function Spot(i, j) {\n              // Location\n              this.i = i;\n              this.j = j;\n            \n              // f, g, and h values for A*\n              this.f = 0;\n              this.g = 0;\n              this.h = 0;\n            \n              // Neighbors\n              this.neighbors = [];\n            \n              // Where did I come from?\n              this.previous = undefined;\n            \n              // Am I a wall?\n              this.wall = false;\n              if (p.random(1) < 0.4) {\n                this.wall = true;\n              }\n            \n              // Display me\n              this.show = function(col) {\n                if (this.wall) {\n                  p.fill(0);\n                  p.noStroke();\n                  p.ellipse(this.i * w + w / 2, this.j * h + h / 2, w / 2, h / 2);\n                } else if (col) {\n                  p.fill(col);\n                  p.rect(this.i * w, this.j * h, w, h);\n                }\n              };\n            \n              // Figure out who my neighbors are\n              this.addNeighbors = function(grid) {\n                var i = this.i;\n                var j = this.j;\n                if (i < cols - 1) {\n                  this.neighbors.push(grid[i + 1][j]);\n                }\n                if (i > 0) {\n                  this.neighbors.push(grid[i - 1][j]);\n                }\n                if (j < rows - 1) {\n                  this.neighbors.push(grid[i][j + 1]);\n                }\n                if (j > 0) {\n                  this.neighbors.push(grid[i][j - 1]);\n                }\n                if (i > 0 && j > 0) {\n                  this.neighbors.push(grid[i - 1][j - 1]);\n                }\n                if (i < cols - 1 && j > 0) {\n                  this.neighbors.push(grid[i + 1][j - 1]);\n                }\n                if (i > 0 && j < rows - 1) {\n                  this.neighbors.push(grid[i - 1][j + 1]);\n                }\n                if (i < cols - 1 && j < rows - 1) {\n                  this.neighbors.push(grid[i + 1][j + 1]);\n                }\n              };\n        }\n    }\n    render(){\n        return(\n            <section id='AStar'>\n                <div className='title5'>\n                    A* Search Algorithm\n                </div>\n\n                <div className=\"dijkstraDescription\">\n                <b id='bold'>What is it?:</b> <br/>\n                    The A* search is a graph traversal and path searching algorithm which is often<br />\n                    used in many fields of computer science due to it's completeness, optimality and efficiency.<br/>\n                    <br/>\n                <b id=\"bold\"> How it works: </b> \n                    <br />\n                    Like Dijkstra, A* works by making a shortest path tree from the <b>start</b> node to the <br/>\n                    <b>target</b> node.<br/>\n                    <br/>\n                <b id='bold'>Real World Application:</b><br/>\n                    - It's used in various applications such as maps. In maps, the algorithm is used to calculate the <br/> \n                    shortest distance between the initial node to the destination node.<br/>\n                    <br/>\n                <b id=\"bold\">Note: </b>\n                    Although A* search algorithm's efficiency - one major practical drawback is it's<br/>\n                    O(bd) space complexity meaning that it stores all generated nodes memory.  <br></br>\n                </div>\n\n                <div id=\"resetAStar\"></div>\n                <br/>\n                <P5Wrapper sketch={this.sketch}></P5Wrapper>\n            </section>\n\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\n\nexport default class TravelingSalesperson extends Component {\n    sketch(p){\n\n        let cities = [];\n        let totalCities = 12;\n\n        let popSize = 500;\n        let population = [];\n        let fitness = [];\n\n        let recordDistance = Infinity;\n        let bestEver;\n        let currentBest;\n\n        let statusP;\n\n        p.setup = () => {\n        p.createCanvas(800, 800);\n        let order = [];\n        for (let i = 0; i < totalCities; i++) {\n            let v = p.createVector(p.random(p.width), p.random(p.height / 2));\n            cities[i] = v;\n            order[i] = i;\n        }\n\n        for (let i = 0; i < popSize; i++) {\n            population[i] = p.shuffle(order);\n        }\n        statusP = p.createP('').style('font-size', '32pt');\n\n        let button = p.createButton(\"reset\");\n            button.mousePressed(resetSketch);\n            button.parent(\"resetTravelingSalesperson\");\n        }\n\n        function resetSketch() {\n            window.location.reload();\n        }\n\n        p.draw = () => {\n        p.background(0);\n\n        // GA\n        calculateFitness();\n        normalizeFitness();\n        nextGeneration();\n\n        p.stroke(255);\n        p.strokeWeight(4);\n        p.noFill();\n        p.beginShape();\n        for (let i = 0; i < bestEver.length; i++) {\n            let n = bestEver[i];\n            p.vertex(cities[n].x, cities[n].y);\n            p.ellipse(cities[n].x, cities[n].y, 16, 16);\n        }\n        p.endShape();\n\n        p.translate(0, p.height / 2);\n        p.stroke(255);\n        p.strokeWeight(4);\n        p.noFill();\n        p.beginShape();\n        for (let i = 0; i < currentBest.length; i++) {\n            let n = currentBest[i];\n            p.vertex(cities[n].x, cities[n].y);\n            p.ellipse(cities[n].x, cities[n].y, 16, 16);\n        }\n        p.endShape();\n        }\n\n        function swap(a, i, j) {\n        let temp = a[i];\n        a[i] = a[j];\n        a[j] = temp;\n        }\n\n        function calcDistance(points, order) {\n        let sum = 0;\n        for (let i = 0; i < order.length - 1; i++) {\n            let cityAIndex = order[i];\n            let cityA = points[cityAIndex];\n            let cityBIndex = order[i + 1];\n            let cityB = points[cityBIndex];\n            let d = p.dist(cityA.x, cityA.y, cityB.x, cityB.y);\n            sum += d;\n        }\n        return sum;\n        }\n        function calculateFitness() {\n            let currentRecord = Infinity;\n            for (let i = 0; i < population.length; i++) {\n              let d = calcDistance(cities, population[i]);\n              if (d < recordDistance) {\n                recordDistance = d;\n                bestEver = population[i];\n              }\n              if (d < currentRecord) {\n                currentRecord = d;\n                currentBest = population[i];\n              }\n              fitness[i] = 1 / (p.pow(d, 8) + 1);\n            }\n          }\n          \n          function normalizeFitness() {\n            let sum = 0;\n            for (let i = 0; i < fitness.length; i++) {\n              sum += fitness[i];\n            }\n            for (let i = 0; i < fitness.length; i++) {\n              fitness[i] = fitness[i] / sum;\n            }\n          }\n          \n          function nextGeneration() {\n            let newPopulation = [];\n            for (let i = 0; i < population.length; i++) {\n              let orderA = pickOne(population, fitness);\n              let orderB = pickOne(population, fitness);\n              let order = crossOver(orderA, orderB);\n              mutate(order, 0.01);\n              newPopulation[i] = order;\n            }\n            population = newPopulation;\n          }\n          \n          function pickOne(list, prob) {\n            let index = 0;\n            let r = p.random(1);\n          \n            while (r > 0) {\n              r = r - prob[index];\n              index++;\n            }\n            index--;\n            return list[index].slice();\n          }\n          \n          function crossOver(orderA, orderB) {\n            let start = p.floor(p.random(orderA.length));\n            let end = p.floor(p.random(start + 1, orderA.length));\n            let neworder = orderA.slice(start, end);\n            for (let i = 0; i < orderB.length; i++) {\n              let city = orderB[i];\n              if (!neworder.includes(city)) {\n                neworder.push(city);\n              }\n            }\n            return neworder;\n          }\n          \n          function mutate(order, mutationRate) {\n            for (let i = 0; i < totalCities; i++) {\n              if (p.random(1) < mutationRate) {\n                let indexA = p.floor(p.random(order.length));\n                let indexB = (indexA + 1) % totalCities;\n                swap(order, indexA, indexB);\n              }\n            }\n        }\n    }\n    render() {\n        return(\n            <section id='geneticAlgo'>\n                <div className='title5'>\n                    Traveling Salesperson \n                    <br></br>with Genetic Algorithm\n                </div>\n\n                <div className=\"dijkstraDescription\">\n                <b id='bold'>What is it?:</b> <br/>\n                    <b>Traveling Salesperson:</b><br/>\n                    - This is a common computer science problem which says that a salesperson is given<br/>\n                    a set of cities, he has to find the shortest path to visit each city exactly once and <br/>\n                    return to the starting city.<br/>\n                    <b>Genetic Algorithm:</b><br/>\n                    - This algorithm is inspired by the process that supports the evolution of life. (Darwin's Theory of Evolution)<br/>\n                    It's designed to replicate the natural selection process - survival of the fittest.<br/>\n                    <br/>\n                <b id=\"bold\"> How it works: </b> \n                    <br />\n                    <b>1.</b>\n                        Initialize the population randomly.\n                    <br/>\n                    <b>2.</b>\n                        Determine the fitness of the chromosome.\n                    <br/>    \n                    <b>3.</b>\n                        <b>Repeat until done:</b><br/>\n                        1) Select parents -> \n                        2) Perform crossover and mutation ->\n                        3) Calculate the fitness of the new population ->\n                        4) Append it to the gene pool<br/>\n\n                    <br/>\n                <b id='bold'>Real World Application:</b><br/>\n                    - They are commonly used to generate high quality solutions for optimization and search problems<br/> \n                    - Genetic Algo concepts can be applied to engineering problems such as optimization for gas pipeline systems.<br/> \n                    As well as, structure optimization.<br/>\n                </div>\n\n                <div id=\"resetTravelingSalesperson\"></div>\n                <br/>\n                <P5Wrapper sketch={this.sketch}></P5Wrapper>\n            </section>\n        )\n    }\n}\n ","export default __webpack_public_path__ + \"static/media/algob-w-2.732f5cbb.png\";","import React from 'react';\nimport Particles from 'react-tsparticles';\nimport img from '../../img/algob-w-2.png';\n\n\nexport default function HomePage(){\n    return(\n      <div className='homePageWrapper'>\n        <Particles\n          id=\"tsparticles\"\n          options={{\n            background: {\n              color: {\n              //   value: \"#0d47a1\",\n              value: '#de3023',\n              },\n            },\n            fpsLimit: 60,\n            interactivity: {\n              detectsOn: \"canvas\",\n              events: {\n                onClick: {\n                  enable: true,\n                  mode: \"push\",\n                },\n                onHover: {\n                  enable: true,\n                  mode: \"repulse\",\n                },\n                resize: true,\n              },\n              modes: {\n                bubble: {\n                  distance: 400,\n                  duration: 2,\n                  opacity: 0.8,\n                  size: 40,\n                },\n                push: {\n                  quantity: 4,\n                },\n                repulse: {\n                  distance: 200,\n                  duration: 0.4,\n                },\n              },\n            },\n            particles: {\n              color: {\n                value: \"#ffffff\",\n              },\n              links: {\n                color: \"#ffffff\",\n                distance: 150,\n                enable: true,\n                opacity: 0.5,\n                width: 1,\n              },\n              collisions: {\n                enable: true,\n              },\n              move: {\n                direction: \"none\",\n                enable: true,\n                outMode: \"bounce\",\n                random: false,\n                speed: 6,\n                straight: false,\n              },\n              number: {\n                density: {\n                  enable: true,\n                  value_area: 800,\n                },\n                value: 80,\n              },\n              opacity: {\n                value: 0.5,\n              },\n              shape: {\n                type: \"circle\",\n              },\n              size: {\n                random: true,\n                value: 5,\n              },\n            },\n            detectRetina: true,\n        }} />\n\n        <h1 className='homePageHeader'>\n          <img src={img} />\n        </h1>\n\n        <p className='homePageText'>\n          Welcome to my algorithm visualizer, I built this application <br/> \n          because I was interested in\n          creating a pathfinding and  <br/>\n          sorting visualizer using \n          computer science algorithms. I thought it <br/>\n          would be a fun way to learn more about algorithms and how they work. \n        <br/>\n        <br/>\n          Sources: <br/>\n\n          <a href='https://www.geeksforgeeks.org/fundamentals-of-algorithms/'style={{color:'black'}}>Basic Algorithm Introductions</a><br/>\n          <a href='https://p5js.org/reference/' style={{color:'black'}}>P5 Documentation</a><br/>\n          <a href='https://www.npmjs.com/package/react-particles-js' style={{color:'black'}}>React Particles</a>\n\n        </p>\n      </div>\n    )\n}","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport PathfindingVisualizer from '../PathfindingVisualizer/PathfindingVisualizer';\nimport QuickSort from '../QuickSort/QuickSort';\nimport BubbleSort from '../BubbleSort/BubbleSort';\nimport BFS from '../BFS/BFS';\nimport BFS2 from '../BFS/BFS2';\nimport AStar from '../A*Star/A_star';\nimport TravelingSalesperson from '../Traveling_Salesperson/TravelingSalesperson';\nimport HomePage from '../HomePage/HomePage';\n\nexport default function Router(){\n    return(\n        <div>\n            <Route path='/AlgoSeeker'>\n                <HomePage />\n            </Route>\n            \n            <Route path='/dijkstras'>\n                <PathfindingVisualizer />\n            </Route>\n\n            <Route path='/bfs'>\n                <BFS2 />\n                <BFS />\n            </Route>\n\n            <Route path='/qsort'>\n                <QuickSort />\n            </Route>\n\n            <Route path='/bsort'>\n                <BubbleSort />\n            </Route>\n\n            <Route path='/astar'>\n                <AStar />\n            </Route>\n\n            <Route path='/travelingsalesperson'>\n                <TravelingSalesperson />\n            </Route>\n\n            {/* <Redirect from='/' to='/landing' /> */}\n        </div>\n    )\n}","export default __webpack_public_path__ + \"static/media/algoseeker.4339e3ea.png\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport img from '../../algoseeker.png'\nimport './Navbar.css'\n\nconst Navbar = () => {\n    return(\n        <nav>\n                <div>\n                    <Link to='/AlgoSeeker' style={{padding: 20}}>\n                        <img src={img} style={{height:'50px', width:'50px'}} className='logobar' />\n                    </Link>\n                </div>\n                <div className='nav1'>\n                    <Link to='/AlgoSeeker' style={{ padding: 20, textDecoration:'None', color:'white', fontWeight:'bold', fontSize: 'large'}}> \n                    Choose your Algorithm!: </Link>\n\n                    <Link to='/dijkstras' style={{padding: 20, color:'white', fontWeight:'bold', fontSize: 'large'}}>\n                    Dijkstra\n                    </Link>\n\n                    <Link to='/bfs' style={{padding: 20, color:'white', fontWeight:'bold', fontSize: 'large'}}>\n                    Breadth-First Search\n                    </Link>\n\n                    <Link to='/bsort' style={{padding: 20, color:'white', fontWeight:'bold', fontSize: 'large'}}>\n                    Bubble Sort\n                    </Link>\n\n                    <Link to='/qsort' style={{padding: 20, color:'white', fontWeight:'bold', fontSize: 'large'}}>\n                    Quick Sort\n                    </Link>\n\n                    <Link to='/astar' style={{padding: 20, color:'white', fontWeight:'bold', fontSize: 'large'}}>\n                    A* Search\n                    </Link>\n\n                    <Link to='/travelingsalesperson' style={{padding: 20, color:'white', fontWeight:'bold', fontSize: 'large'}}>\n                    Traveling Salesperson w/ Genetic Algo\n                    </Link>\n                </div>\n        </nav>\n    )\n}\n\nexport default Navbar;","import './App.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport Router from './components/Navbar/Router';\nimport Navbar from './components/Navbar/Navbar';\n\nconst App = () => {\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <header>\n          <Navbar />\n          <Router />\n        </header>\n      </div>\n    </BrowserRouter>\n  )\n}  \n\n  \n  \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}