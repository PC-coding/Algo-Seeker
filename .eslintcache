[{"/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/index.js":"1","/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/App.js":"2","/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/reportWebVitals.js":"3","/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/PathfindingVisualizer/PathfindingVisualizer.js":"4","/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/PathfindingVisualizer/Node/Node.js":"5","/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/dijkstra/djikstra.js":"6","/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/BFS/BFS.jsx":"7","/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/BFS/BFS2.js":"8","/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/BubbleSort/BubbleSort.js":"9","/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/QuickSort/QuickSort.js":"10","/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/Navbar/Router.js":"11","/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/Navbar/Navbar.js":"12"},{"size":500,"mtime":1607018973582,"results":"13","hashOfConfig":"14"},{"size":396,"mtime":1607891567660,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1607018973582,"results":"16","hashOfConfig":"14"},{"size":6066,"mtime":1607735444050,"results":"17","hashOfConfig":"14"},{"size":689,"mtime":1607735611637,"results":"18","hashOfConfig":"14"},{"size":2464,"mtime":1607735320937,"results":"19","hashOfConfig":"14"},{"size":17966,"mtime":1607891008764,"results":"20","hashOfConfig":"14"},{"size":18095,"mtime":1607891316216,"results":"21","hashOfConfig":"14"},{"size":1415,"mtime":1607831825488,"results":"22","hashOfConfig":"14"},{"size":4244,"mtime":1607895795649,"results":"23","hashOfConfig":"14"},{"size":789,"mtime":1607890682922,"results":"24","hashOfConfig":"14"},{"size":1391,"mtime":1607897272160,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"zofrmq",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/index.js",[],["53","54"],"/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/App.js",[],"/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/reportWebVitals.js",[],"/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/PathfindingVisualizer/PathfindingVisualizer.js",["55","56","57","58","59","60","61","62","63"],"import React, { Component } from \"react\";\nimport Node from \"./Node/Node\";\nimport { dijkstra, getNodesInShortestPathOrder } from \"../dijkstra/djikstra\";\nimport {\n  Container,\n  Divider,\n  Dropdown,\n  Grid,\n  Header,\n  Image,\n  List,\n  Menu,\n  Button,\n  Segment\n} from \"semantic-ui-react\";\n\n\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 10;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 40;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid, mouseIsPressed: true });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({ grid: newGrid });\n  }\n\n  handleMouseUp() {\n    this.setState({ mouseIsPressed: false });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-visited\";\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          \"node node-shortest-path\";\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  clearPath() {\n    this.setState({ grid: [] });\n    const grid = getInitialGrid();\n    this.setState({ grid });\n  }\n\n  resetSketch() {\n    window.location.reload();\n  }\n\n  render() {\n    const { grid, mouseIsPressed } = this.state;\n\n    return (\n      <section id=\"dijkstraSec\">\n\n        <div id=\"dijkstraTitle\">\n  Dijkstra's Algorithm\n</div> <b></b>\n\n<div className=\"dijkstraDescription\">\n<b id=\"bold\">How to use: </b>Create walls by clicking and dragging over the grid.<br></br> Hit visualize\n  to see Dijkstra's Algorithm select the shortest path! <br></br>\n<b id=\"bold\">How it works: </b> The <b>start</b> node and <b>end</b> node are marked on left and right respectively.<br></br>\n  Find distance to all nodes from start, all distances=infinity except start node to begin <br></br>\n<b id=\"bold\">1.</b> Pick the closest node to visit, which is start node.\n  <b id=\"bold\">2.</b> Update neighboring nodes, set their distance to current distance + 1.<br></br>\n  <b id=\"bold\">3.</b> Mark start node visited. Select next closest node.\n  <b id=\"bold\">4.</b> Pick one of the 4 neighbors and repeat.<br></br><br></br>\n<b id=\"bold\">Note: </b>The most efficient way to keep track of the closest unvisited node is by using a Min Heap.<br></br>\n  Since the amount of nodes is so few here, we opt for using an array of unvisited nodes and<br></br>\n   sort the nodes with each pass. The nodes are animated in the order that they are visited.\n\n\n</div>\n\n          <Button\n              style={{ marginRight: 16 }}\n              onClick={() => this.clearPath()}\n            >\n              Clear Path\n            </Button>\n\n            <Button\n              color=\"blue\"\n              style={{ marginRight: 16 }}\n              onClick={() => this.visualizeDijkstra()}>\n              Visualize Algorithm\n            </Button>\n\n\n\n\n        <Button onClick={() => this.resetSketch()}>\n          Reset Board\n        </Button>\n\n        <div className=\"dijkstraGrid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isFinish, isStart, isWall } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </section>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/PathfindingVisualizer/Node/Node.js",[],"/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/dijkstra/djikstra.js",[],"/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/BFS/BFS.jsx",["64","65","66","67","68","69","70","71","72","73","74","75"],"/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/BFS/BFS2.js",["76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96"],"/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/BubbleSort/BubbleSort.js",["97","98","99"],"import React, {Component} from 'react';\nimport P5Wrapper from 'react-p5-wrapper';\nimport Button from 'react-p5-wrapper';\n\n\nexport default class BubbleSort extends Component {\n  sketch(p){\n    let values = [];\n\nlet i = 0;\nlet j = 0;\nlet w = 50;\n\n\np.setup = () => {\n  p.createCanvas(900, 600);\n  values = new Array(p.width);\n  for (let i = 0; i < values.length; i++) {\n    values[i] = p.random(p.height);\n    //values[i] = noise(i/100.0)*height;\n  }\n  var button = p.createButton(\"reset\");\n  button.mousePressed(resetSketch);\n  button.parent(\"resetQSort\");\n}\n\nfunction resetSketch() {\n  window.location.reload();\n}\n\np.draw = () => {\n  p.background(0);\n\n  if (i < values.length) {\n    for (let j = 0; j < values.length - i - 1; j++) {\n      let a = values[j];\n      let b = values[j + 1];\n      if (a > b) {\n        swap(values, j, j + 1);\n      }\n    }\n  } else {\n    console.log(\"finished\");\n    p.noLoop();\n  }\n  i++;\n  for (let i = 0; i < values.length; i++) {\n    p.stroke(255);\n    p.line(i, p.height, i, p.height - values[i]);\n  }\n}\n\n\nfunction swap(arr, a, b) {\n  let temp = arr[a];\n  arr[a] = arr[b];\n  arr[b] = temp;\n}\n  }\n\n  render() {\n\n    return (\n      <section id=\"QSort\">\n\n        <div className=\"title4\">\n  Bubble Sort\n</div>\n\n<div className=\"description4\">\n  <b> Need to make description :) </b>\n</div>\n<div id=\"resetQSort\"></div>\n<P5Wrapper sketch={this.sketch}></P5Wrapper>\n\n\n\n</section>\n);\n  }\n\n\n\n}","/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/QuickSort/QuickSort.js",["100","101","102","103"],"/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/Navbar/Router.js",["104"],"/Users/tappy/Byte/AlgoSeeker/algo-seeker/src/components/Navbar/Navbar.js",["105"],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":5,"column":3,"nodeType":"112","messageId":"113","endLine":5,"endColumn":12},{"ruleId":"110","severity":1,"message":"114","line":6,"column":3,"nodeType":"112","messageId":"113","endLine":6,"endColumn":10},{"ruleId":"110","severity":1,"message":"115","line":7,"column":3,"nodeType":"112","messageId":"113","endLine":7,"endColumn":11},{"ruleId":"110","severity":1,"message":"116","line":8,"column":3,"nodeType":"112","messageId":"113","endLine":8,"endColumn":7},{"ruleId":"110","severity":1,"message":"117","line":9,"column":3,"nodeType":"112","messageId":"113","endLine":9,"endColumn":9},{"ruleId":"110","severity":1,"message":"118","line":10,"column":3,"nodeType":"112","messageId":"113","endLine":10,"endColumn":8},{"ruleId":"110","severity":1,"message":"119","line":11,"column":3,"nodeType":"112","messageId":"113","endLine":11,"endColumn":7},{"ruleId":"110","severity":1,"message":"120","line":12,"column":3,"nodeType":"112","messageId":"113","endLine":12,"endColumn":7},{"ruleId":"110","severity":1,"message":"121","line":14,"column":3,"nodeType":"112","messageId":"113","endLine":14,"endColumn":10},{"ruleId":"110","severity":1,"message":"122","line":107,"column":15,"nodeType":"112","messageId":"113","endLine":107,"endColumn":16},{"ruleId":"110","severity":1,"message":"123","line":107,"column":18,"nodeType":"112","messageId":"113","endLine":107,"endColumn":19},{"ruleId":"110","severity":1,"message":"124","line":107,"column":21,"nodeType":"112","messageId":"113","endLine":107,"endColumn":22},{"ruleId":"125","severity":1,"message":"126","line":122,"column":34,"nodeType":"127","messageId":"128","endLine":122,"endColumn":36},{"ruleId":"110","severity":1,"message":"124","line":136,"column":23,"nodeType":"112","messageId":"113","endLine":136,"endColumn":24},{"ruleId":"110","severity":1,"message":"129","line":388,"column":34,"nodeType":"112","messageId":"113","endLine":388,"endColumn":42},{"ruleId":"110","severity":1,"message":"130","line":388,"column":44,"nodeType":"112","messageId":"113","endLine":388,"endColumn":53},{"ruleId":"110","severity":1,"message":"131","line":404,"column":8,"nodeType":"112","messageId":"113","endLine":404,"endColumn":22},{"ruleId":"125","severity":1,"message":"126","line":427,"column":27,"nodeType":"127","messageId":"128","endLine":427,"endColumn":29},{"ruleId":"132","severity":1,"message":"133","line":442,"column":17,"nodeType":"134","messageId":"135","endLine":442,"endColumn":19},{"ruleId":"136","severity":1,"message":"137","line":450,"column":15,"nodeType":"127","messageId":"138","endLine":455,"endColumn":8},{"ruleId":"125","severity":1,"message":"126","line":450,"column":19,"nodeType":"127","messageId":"128","endLine":450,"endColumn":21},{"ruleId":"110","severity":1,"message":"139","line":1,"column":16,"nodeType":"112","messageId":"113","endLine":1,"endColumn":25},{"ruleId":"110","severity":1,"message":"122","line":116,"column":11,"nodeType":"112","messageId":"113","endLine":116,"endColumn":12},{"ruleId":"110","severity":1,"message":"123","line":116,"column":14,"nodeType":"112","messageId":"113","endLine":116,"endColumn":15},{"ruleId":"110","severity":1,"message":"124","line":116,"column":17,"nodeType":"112","messageId":"113","endLine":116,"endColumn":18},{"ruleId":"110","severity":1,"message":"140","line":116,"column":20,"nodeType":"112","messageId":"113","endLine":116,"endColumn":21},{"ruleId":"110","severity":1,"message":"141","line":116,"column":23,"nodeType":"112","messageId":"113","endLine":116,"endColumn":24},{"ruleId":"110","severity":1,"message":"124","line":129,"column":19,"nodeType":"112","messageId":"113","endLine":129,"endColumn":20},{"ruleId":"132","severity":1,"message":"133","line":153,"column":12,"nodeType":"134","messageId":"135","endLine":153,"endColumn":14},{"ruleId":"142","severity":1,"message":"143","line":321,"column":18,"nodeType":"144","messageId":"145","endLine":321,"endColumn":38,"fix":"146"},{"ruleId":"110","severity":1,"message":"129","line":350,"column":35,"nodeType":"112","messageId":"113","endLine":350,"endColumn":43},{"ruleId":"110","severity":1,"message":"130","line":350,"column":45,"nodeType":"112","messageId":"113","endLine":350,"endColumn":54},{"ruleId":"110","severity":1,"message":"147","line":351,"column":14,"nodeType":"112","messageId":"113","endLine":351,"endColumn":18},{"ruleId":"110","severity":1,"message":"148","line":351,"column":20,"nodeType":"112","messageId":"113","endLine":351,"endColumn":25},{"ruleId":"110","severity":1,"message":"149","line":351,"column":27,"nodeType":"112","messageId":"113","endLine":351,"endColumn":30},{"ruleId":"110","severity":1,"message":"150","line":351,"column":32,"nodeType":"112","messageId":"113","endLine":351,"endColumn":38},{"ruleId":"132","severity":1,"message":"151","line":373,"column":24,"nodeType":"134","messageId":"135","endLine":373,"endColumn":26},{"ruleId":"132","severity":1,"message":"151","line":375,"column":20,"nodeType":"134","messageId":"135","endLine":375,"endColumn":22},{"ruleId":"125","severity":1,"message":"126","line":432,"column":32,"nodeType":"127","messageId":"128","endLine":432,"endColumn":34},{"ruleId":"132","severity":1,"message":"151","line":443,"column":24,"nodeType":"134","messageId":"135","endLine":443,"endColumn":26},{"ruleId":"136","severity":1,"message":"137","line":446,"column":11,"nodeType":"127","messageId":"138","endLine":452,"endColumn":4},{"ruleId":"125","severity":1,"message":"126","line":446,"column":15,"nodeType":"127","messageId":"128","endLine":446,"endColumn":17},{"ruleId":"110","severity":1,"message":"152","line":3,"column":8,"nodeType":"112","messageId":"113","endLine":3,"endColumn":14},{"ruleId":"110","severity":1,"message":"153","line":11,"column":5,"nodeType":"112","messageId":"113","endLine":11,"endColumn":6},{"ruleId":"110","severity":1,"message":"154","line":12,"column":5,"nodeType":"112","messageId":"113","endLine":12,"endColumn":6},{"ruleId":"132","severity":1,"message":"151","line":92,"column":13,"nodeType":"134","messageId":"135","endLine":92,"endColumn":15},{"ruleId":"132","severity":1,"message":"133","line":105,"column":21,"nodeType":"134","messageId":"135","endLine":105,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":107,"column":28,"nodeType":"134","messageId":"135","endLine":107,"endColumn":30},{"ruleId":"132","severity":1,"message":"133","line":109,"column":28,"nodeType":"134","messageId":"135","endLine":109,"endColumn":30},{"ruleId":"110","severity":1,"message":"155","line":2,"column":10,"nodeType":"112","messageId":"113","endLine":2,"endColumn":23},{"ruleId":"156","severity":1,"message":"157","line":11,"column":25,"nodeType":"158","endLine":11,"endColumn":80},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","'Dropdown' is defined but never used.","'Grid' is defined but never used.","'Header' is defined but never used.","'Image' is defined but never used.","'List' is defined but never used.","'Menu' is defined but never used.","'Segment' is defined but never used.","'q' is assigned a value but never used.","'r' is assigned a value but never used.","'s' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'vertDist' is assigned a value but never used.","'horizDist' is assigned a value but never used.","'playerPosition' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'cameFrom', 'cameFrom', 'current'.","unsafeRefs","'Component' is defined but never used.","'x' is assigned a value but never used.","'y' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property getContext.","MemberExpression","unexpectedWhitespace",{"range":"161","text":"162"},"'left' is assigned a value but never used.","'right' is assigned a value but never used.","'top' is assigned a value but never used.","'bottom' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'Button' is defined but never used.","'j' is assigned a value but never used.","'w' is assigned a value but never used.","'BrowserRouter' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",[12189,12191],"."]